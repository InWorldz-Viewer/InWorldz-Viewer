#line 2 "indra_generated.l.cpp"

#line 4 "indra_generated.l.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 538
#define YY_END_OF_BUFFER 539
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3709] =
    {   0,
        0,    0,  539,  537,  536,  536,  531,  537,  516,  527,
      510,  511,  514,  513,  508,  512,   56,  515,   58,   58,
      518,  505,  520,  509,  519,  517,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  522,  521,  529,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  506,  528,
      507,  530,  524,    0,  497,    0,  504,  532,  502,  498,
      500,  499,  501,  495,    2,    1,  503,  496,   58,    0,
        0,  534,  526,  523,  525,  535,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,    0,  493,  493,  493,  493,  493,  493,  493,
      493,  179,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   19,  493,  493,  493,  493,
      493,  493,   16,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  533,    0,  495,  495,    0,  496,    0,
      494,   57,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  176,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,   18,  493,  493,  493,    6,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,    0,  495,    0,  495,    0,  496,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   99,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   59,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   17,  493,  493,  493,
      493,  493,   14,  493,  493,   10,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,    0,  495,  493,  111,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   60,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  104,  493,  493,  184,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   43,   13,    4,  493,
      493,  493,  493,  493,   42,  493,  493,  493,  493,  493,
       37,  493,  493,  493,  493,  493,  493,   12,  493,   32,
       24,  493,   20,  112,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      103,  493,  102,  493,  493,  493,  493,  180,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       46,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       33,  493,  493,  493,  493,   51,  493,  493,   15,  493,
      493,   34,  493,    5,  493,    7,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   98,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  113,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      100,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,   45,  493,
       36,  493,   11,  493,    3,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  107,  493,  493,  493,  493,  493,  493,
      493,  175,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  431,  493,  406,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  114,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  171,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,    9,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  105,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  240,  239,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  106,  110,  493,
      397,  493,  493,  401,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  404,  493,  405,  493,  101,  181,  493,  493,  493,
      493,  493,  345,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  338,  493,  493,  493,  329,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   38,   27,  493,  493,  493,
      493,  493,  493,  493,   35,  493,  493,  493,  493,  493,
      493,  493,  493,   25,  493,  493,  493,   77,   82,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  121,  493,  493,  493,  493,
      493,  493,  493,  182,  493,  493,  493,  493,  493,  493,
      229,  231,  493,  233,  230,  493,  493,  493,  493,  493,
      493,  493,  399,  398,  493,  493,  493,  493,  493,  162,
      163,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  341,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  183,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  169,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   47,  493,  493,
      493,  493,   49,  493,  493,  493,   52,    8,  493,  493,
      493,   22,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  197,  493,  493,  200,  190,
      493,  201,  203,  493,  493,  213,  493,  493,  217,  493,
      493,  493,  493,  227,  205,  493,  202,  204,  493,  493,
      210,  493,  493,  218,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  115,  493,  493,  493,

      493,  493,  238,  493,  241,  493,  493,  493,  493,  493,
      493,  458,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  234,  493,  232,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  161,  493,  160,
      493,  493,  493,  493,  493,  493,  493,  493,  432,  493,
      403,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  344,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  476,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  170,  172,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  187,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,   53,
      493,   21,   23,  493,  493,  493,   71,   79,  493,  493,
      493,  493,   80,  493,  493,  216,  189,  493,  493,  493,
      195,  193,  209,  215,  493,  208,  214,  199,  493,  196,
      194,  207,  212,  493,  206,  211,  493,  493,  493,   95,
       84,  493,  493,  493,  493,  153,  493,  493,  493,  493,

      493,  493,  493,  116,  122,  493,  117,  493,  493,  493,
      245,  242,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  166,  165,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  335,  331,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  340,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  168,  174,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   55,  493,  493,   50,   48,  493,  493,  493,
      493,  493,  493,  493,  493,  493,   75,   78,  493,  493,
      493,  493,  493,  198,  493,   93,  493,  493,  493,  493,
      493,  149,  493,  155,  493,  151,  150,  493,  493,  493,

      493,  493,  118,  493,  493,  493,  493,  185,  493,  493,
      459,  493,  146,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      421,  493,  493,  422,  493,  493,  493,  426,  400,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  402,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  332,  493,  493,
      493,  493,  493,  330,  493,  337,  339,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  346,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  485,  493,  487,  493,  493,  493,
      173,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  188,   40,   28,  493,   54,  493,  493,   39,
      493,  493,  493,  493,  493,  493,   73,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  156,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  147,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  423,  493,  493,  493,
      493,  493,  167,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  374,  493,  493,  493,
      493,  493,  372,  493,  493,  493,  370,  493,  493,  493,
      493,  493,  378,  493,  373,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  367,  493,  493,  493,
      493,  493,  493,  493,  352,  493,  493,  493,  351,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  279,
      493,  493,  493,  493,  493,  282,  493,  493,  493,  493,
      186,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,   65,   61,  493,  493,   66,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,   30,  493,  493,  493,  493,   81,   74,
       76,  493,  493,  493,  493,  493,  493,  493,   88,  493,
      493,  493,  493,   94,  493,  493,  493,  493,  152,  493,
      493,  493,  493,  493,  493,  493,  123,  493,  493,  493,

      244,  243,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  137,  493,  493,  493,  493,  493,  108,
      493,  493,  493,  430,  493,  493,  493,  164,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  382,  493,  493,  493,  493,  380,  493,  493,  342,
      493,  379,  493,  493,  387,  493,  343,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  369,  493,  366,  493,  493,  493,  493,  348,
      493,  493,  350,  493,  493,  493,  493,  493,  251,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,   62,   63,   64,
      493,  493,  486,  488,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
       26,  493,  493,  493,   83,  493,  493,  493,  493,  493,
      493,  493,  191,  192,  493,   87,  493,  493,  493,  493,
      493,  493,  493,  157,  480,  493,  493,  481,  493,  479,
      493,  493,  119,  493,  493,  493,  462,  493,  493,  493,

      493,  493,  493,  138,  139,  493,  237,  493,  235,  493,
      493,  424,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  125,  493,  493,
      493,  493,  493,  375,  371,  493,  493,  381,  493,  383,
      385,  493,  493,  355,  493,  356,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  333,  493,  493,  493,  334,
      493,  493,  493,  353,  349,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  268,  493,  493,  269,  493,  280,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  474,  475,  493,  493,  493,  493,  493,  493,  493,
      493,  304,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  291,  493,  493,
      493,  493,  493,  493,  493,   72,  493,  225,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  148,
      493,  477,  482,  483,  493,  493,  120,  493,  493,  493,
      493,  493,  145,  493,  493,  136,  236,  109,  493,  493,
      425,  493,  493,  493,  493,  493,  493,  468,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  247,  129,  493,  493,  493,  493,  493,  493,
      493,  376,  493,  493,  386,  336,  354,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  368,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  258,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  250,  493,   67,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  292,  289,  290,  493,  493,

      493,   41,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  478,
      124,  493,  493,  493,  143,  141,  140,  142,  493,  493,
      493,  493,  465,  466,  464,  493,  463,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  377,  493,  357,
      493,  493,  493,  493,  493,  493,  493,  361,  493,  493,
      493,  493,  493,  493,  493,  493,  389,  347,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  273,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   68,  493,  493,  490,  493,
      493,  178,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   31,  493,  493,  493,  493,
      493,  223,  219,  493,  222,  493,  493,  493,   97,   85,
      493,   86,  493,  493,  493,  493,  493,  460,  461,  144,
      493,  428,  493,  493,  493,  473,  470,  493,  469,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  384,  362,  360,  365,  359,  493,
      493,  358,  493,  493,  493,  493,  493,  493,  493,  388,
      493,  493,  256,  255,  257,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  259,  493,  493,  493,  274,  493,
      270,  493,  271,  493,  493,  493,  281,  493,  493,  493,
      493,  493,  493,  452,  248,  249,   70,  493,  489,  493,
      493,  177,  493,  493,  493,  493,  316,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  228,  493,  493,  493,
      220,  493,  493,  493,  493,  493,  154,  158,  493,  493,

      493,  493,  493,  472,  471,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  246,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      364,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  272,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  491,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  301,  493,  493,  493,  493,  493,  493,
      294,  493,   29,   44,  493,  493,  221,  493,   90,  493,

      493,  493,  493,  493,  427,  159,  467,  493,  493,  493,
      433,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      363,  493,  493,  493,  394,  493,  493,  493,  262,  493,
      493,  493,  493,  493,  253,  252,  254,  493,  493,  493,
      276,  493,  283,  493,  284,  493,  493,  493,  455,  493,
      493,  493,  450,  493,   69,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  293,  493,  224,
      493,  493,   92,   96,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  392,  493,
      391,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      286,  493,  493,  493,  493,  493,  493,  493,  492,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  318,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  226,   89,  493,  484,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  131,  493,  493,  493,  493,  493,
      134,  493,  396,  395,  493,  390,  266,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      303,  493,  493,  493,  493,  493,  493,  295,  493,  493,
      429,  493,  493,  438,  493,  493,  493,  493,  493,  493,
      493,  493,  443,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  412,  132,  493,  493,
      493,  493,  126,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  278,  277,  493,  285,  449,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  302,
      493,  493,  493,  493,  493,  493,  493,   91,  493,  493,
      493,  493,  493,  435,  493,  493,  493,  493,  493,  493,
      493,  493,  419,  410,  493,  409,  418,  407,  493,  413,
      417,  493,  493,  135,  493,  127,  493,  393,  263,  493,
      493,  493,  493,  265,  275,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  317,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      436,  493,  493,  493,  493,  493,  493,  414,  493,  493,
      408,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  315,  493,  493,  493,  324,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  437,  493,  493,  493,  442,  493,
      493,  493,  493,  415,  493,  493,  493,  493,  260,  261,
      493,  287,  493,  451,  493,  454,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  325,  493,  327,  493,

      493,  493,  493,  493,  493,  493,  300,  493,  493,  493,
      493,  493,  493,  493,  445,  493,  441,  493,  493,  493,
      411,  493,  130,  128,  493,  267,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      320,  326,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  420,  133,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  328,  493,  493,  321,  319,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      444,  493,  264,  493,  493,  453,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  298,
      307,  493,  493,  493,  493,  493,  493,  434,  446,  416,
      493,  493,  457,  493,  493,  493,  493,  299,  311,  493,
      322,  493,  493,  493,  493,  493,  493,  493,  493,  439,
      493,  493,  493,  493,  493,  493,  493,  323,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  288,  456,  493,
      493,  493,  493,  493,  493,  296,  493,  493,  493,  448,
      493,  493,  493,  493,  297,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  306,  493,  493,
      493,  493,  447,  493,  310,  493,  305,  308,  493,  493,

      493,  309,  312,  493,  314,  440,  313,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[87] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    1,
        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[3712] =
    {   0,
        0,    0, 3823, 3824, 3824, 3824, 3799,   82, 3798, 3813,
     3824, 3824, 3796,   77, 3824,   76,   74,   86,   88,   94,
     3824, 3824,   72, 3795,   74, 3824,   88,    0,   89,   91,
     3777, 3790, 3770, 3775,  114, 3787, 3766, 3784,  113,  102,
      108,  121, 3767, 3779, 3778, 3824, 3824, 3824, 3731,   59,
      101,   97,   63, 3730,   82, 3728, 3743,  113, 3732, 3731,
      109, 3727, 3723,  112,   84,  109, 3738, 3734, 3824, 3713,
     3824, 3824, 3824,  133, 3824, 3793, 3824, 3824, 3824, 3824,
     3824, 3824, 3824,  174, 3824, 3824, 3824,  178,  184,  199,
        0, 3824, 3824, 3824, 3824, 3824,    0, 3750, 3764, 3756,

     3758, 3746, 3752, 3763, 3754, 3748, 3741,  149, 3754, 3747,
     3738, 3735,  158, 3742,  138, 3740, 3735, 3741, 3742,  163,
     3733,  181, 3741, 3724, 3746, 3743,  187, 3726,  195, 3730,
     3726,  198, 3719, 3721, 3720, 3725, 3723, 3726, 3729, 3718,
      166, 3703,  117, 3683, 3696,    0, 3682, 3699, 3694, 3683,
     3679, 3676,    0, 3675, 3681, 3668, 3678,  153,  173,  170,
     3681, 3690, 3680, 3687,  178, 3667, 3672, 3671,  170, 3671,
     3662, 3679, 3672, 3824,  239, 3824,  243,  252, 3824,  213,
      259,    0, 3702, 3696, 3678, 3695, 3706, 3701, 3691, 3701,
     3683, 3701, 3680, 3669,    0, 3680, 3682, 3692, 3692, 3684,

     3674, 3677, 3681, 3679, 3685, 3686, 3669,  210, 3674, 3679,
     3683, 3671, 3664, 3670, 3650, 3671, 3664, 3673, 3676, 3664,
     3666, 3659, 3653, 3652, 3662, 3650, 3666, 3663, 3636, 3661,
     3634, 3655, 3648,  205, 3630, 3616, 3617, 3608, 3626, 3625,
     3620, 3615, 3609, 3621,    0, 3605, 3615, 3603,    0, 3614,
     3606, 3596, 3610, 3605, 3594, 3612, 3606, 3592, 3595, 3588,
     3592, 3585, 3604, 3604, 3584, 3582, 3592, 3595, 3596, 3578,
     3585,  266,  270,  279, 3824,  290,  294, 3605, 3606, 3606,
     3593, 3620, 3604, 3614, 3609, 3601, 3587, 3610, 3596, 3610,
     3583, 3599, 3581, 3580, 3579,    0, 3578, 3577, 3604, 3601,

     3596, 3599,  155,  238, 3572, 3577, 3570, 3569, 3590, 3578,
     3582, 3576, 3577, 3574, 3588, 3576, 3571, 3597, 3568, 3574,
     3566, 3578,    0, 3569, 3553, 3565, 3579, 3550, 3534, 3547,
     3544, 3539, 3536, 3526, 3524, 3521,    0, 3529, 3520, 3519,
     3538, 3530,    0, 3536, 3535, 3529, 3508, 3518, 3526, 3529,
     3526, 3523, 3507, 3521, 3505, 3506, 3503, 3502, 3506, 3515,
     3505, 3500, 3509, 3501, 3510,  298,  302, 3540, 3513, 3534,
     3527, 3533, 3539, 3534, 3507, 3522,  295, 3505, 3520,    0,
      253, 3514,  303,  300, 3514,  321, 3521, 3511, 3518, 3507,
     3514, 3522, 3517, 3506,  324, 3508, 3492,  339,  223, 3519,

     3506, 3506, 3514, 3499, 3512,    0, 3496, 3507,    0, 3495,
     3506, 3494, 3480, 3501,  342, 3504, 3496,  206, 3456, 3457,
     3466, 3468, 3453, 3456, 3465, 3457,    0,    0,    0, 3450,
     3462, 3463, 3452, 3450,    0, 3456, 3448, 3441, 3440, 3433,
        0, 3440, 3452, 3442, 3446, 3445, 3435, 3452, 3444,    0,
     3450, 3431,    0,    0,  364, 3475, 3464, 3446, 3445, 3471,
     3473, 3461, 3457, 3470, 3456, 3468, 3467, 3458, 3463, 3434,
     3449,  269, 3458, 3447,  297, 3456, 3445,  298, 3446, 3446,
     3442, 3451, 3447, 3434, 3452, 3430, 3433, 3445, 3426, 3443,
     3416, 3415, 3440, 3424, 3437, 3438, 3422, 3428, 3424, 3423,

     3419, 3421, 3415, 3413,  323,  256, 3421, 3417, 3430,  325,
     3415,  360,  324, 3428, 3410, 3396, 3395, 3394, 3393, 3418,
        0, 3417,    0, 3390, 3389, 3414, 3409,    0, 3405, 3402,
     3410, 3399, 3393, 3407, 3394, 3405, 3394, 3403, 3376, 3368,
        0, 3370, 3364, 3360, 3353, 3350, 3364, 3350, 3352, 3361,
        0, 3365, 3345, 3363, 3362,    0, 3347, 3360,    0, 3344,
     3345,    0, 3352,    0,  326,    0,  362, 3366, 3368, 3373,
     3370, 3368, 3368,  347, 3356, 3379, 3374,    0,  387,  390,
     3347, 3374, 3345, 3357, 3361, 3361, 3347, 3351, 3357, 3361,
     3350, 3363, 3346, 3352, 3346, 3345, 3344, 3339, 3337, 3355,

     3349, 3348, 3334,  371, 3343, 3339, 3333, 3343, 3350, 3331,
     3344, 3333, 3323, 3332, 3320,  404,  410,    0, 3313, 3342,
     3337, 3332, 3328, 3323,  371, 3337, 3323, 3313, 3322, 3315,
     3321, 3327, 3319, 3315, 3317, 3308,  305,  362, 3307, 3305,
     3316, 3298,   65, 3307, 3304, 3318, 3317, 3315, 3312, 3313,
        0, 3312,  425, 3295, 3283, 3299, 3297,  312, 3286, 3290,
     3291, 3305, 3286, 3275, 3285, 3301, 3252, 3266,    0, 3255,
        0, 3247,    0,  330,    0,   73,  124,  362,  162,  353,
      255,  265,  308,  309,  361,  376,  364,  359,  392,  397,
      423,  411,  417,  408,  403,  414,  405,  419,  418,  423,

      428,  423,  423,  445,  439,  443,  446,  434,  448,  450,
      463,  453,  452,  450,  445,  457,  477,  441,  481,  456,
      468,  465,  467,  468,  450,  487,  489,  466,  490,  495,
      492,  478,  497,  500,  501,  498,  489,  490,  505,  499,
      497,  482,  494,    0,  496,  496,  512,  500,  498,  500,
      516,    0,  504,  518,  506,  524,  503,  512,  513,  515,
      525,  516,  527,  521,  529,  526,  515,    0,  522,    0,
      513,  530,  535,  527,  535,  528,  528,  525,  531,  523,
      536,  526,  545,  546,  538,  534,  540,  546,  555,  545,
      544,  554,  544,  554,  557,  543,  533,  557,  561,  555,

      567,    0,  557,  569,  562,  564,  568,  574,  558,  575,
      556,  579,  576,  581,    0,  583,  576,  566,  582,  588,
      591,  573,  565,  547,  554,  565,  550,  556,  561,  555,
      562,  558,  562,  566,  581,  578,  569,  584,    0,  586,
      567,  579,  585,  589,  621,  622,  599,  600,  605,  618,
      627,  610,  615,  622,  612,  624,  623,    0,  634,  633,
      625,  633,  638,  636,  640,  628,  643,  644,  641,  639,
      647,  628,  647,  632,  641,  653,  640,  657,  656,  655,
      653,  661,  643,  656,  648,  666,  650,  652,  660,  659,
      661,  667,  654,  674,  677,  676,  673,  682,  669,  663,

      685,  676,  680,  675,    0,    0,  678,  679,  680,  680,
      683,  696,  670,  687,  683,  698,  674,  701,  695,  690,
      688,  705,  706,  694,  701,  694,  712,    0,    0,  685,
        0,  692,  702,    0,  701,  715,  702,  707,  710,  710,
      706,  706,  717,  717,  709,  711,  731,  729,  720,  723,
      722,    0,  731,    0,  719,    0,    0,  708,  709,  723,
      733,  741,    0,  713,  727,  726,  738,  728,  729,  730,
      735,  727,    0,  722,  749,  734,  725,  726,  757,  759,
      754,  761,  743,  749,  746,  762,  767,  749,  751,  760,
      766,  764,  773,  774,  768,  763,  781,  763,  777,  773,

      766,  773,  773,  770,  776,  790,  781,  779,  786,  791,
      772,  793,  779,  785,  752,    0,  771,  754,  768,  759,
      766,  775,  773,  777,    0,  759,  763,  756,  769,  764,
      769,  768,  767,    0,  770,  795,  818,    0,    0,  819,
      809,  815,  820,  824,  811,  819,  815,  821,  811,  821,
      821,  815,  821,  832,  806,  820,  834,  825,  827,  826,
      825,  839,  842,  831,  829,  843,  829,  839,  846,  830,
      835,  849,  840,  842,  841,  840,  854,  857,  846,  844,
      858,  855,  856,  846,  846,  865,  860,  858,  859,  850,
      859,  860,  868,  875,  876,  866,  864,  877,  858,  878,

      862,  878,  854,  879,  867,    0,  883,  883,  884,  877,
      892,  874,  881,    0,  883,  893,  873,  874,  899,  873,
        0,    0,  892,    0,    0,  887,  877,  901,  902,  892,
      908,  901,    0,    0,  916,  917,  902,  919,  920,    0,
        0,  914,  914,  916,  930,  925,  924,  928,  915,  905,
      912,  932,  937,  923,    0,  941,  927,  943,  939,  935,
      949,  922,  945,  946,  938,  928,  946,  950,  947,  964,
      966,  967,  948,  959,  973,  974,  976,  987,  964,    0,
      983,  990,  990,  974,  965,  983,  979,  978,  999,  997,
      989, 1002,  998, 1001,  981, 1006,  996,    0, 1004, 1001,

     1002, 1005,  995,  994, 1008, 1002, 1002, 1017,  997, 1006,
     1015, 1006, 1005, 1015, 1007,  988,  991,    0,  978,  984,
      980,  993,    0,  983, 1002,  996,    0,    0, 1003, 1000,
      981,    0,  987, 1020, 1032, 1034, 1036, 1026, 1033, 1036,
     1027, 1034, 1042, 1036, 1050,    0, 1027, 1033,    0,    0,
     1052,    0,    0, 1036, 1053,    0, 1045, 1052,    0, 1039,
     1048, 1055, 1055,    0,    0, 1055,    0,    0, 1045, 1062,
        0, 1054, 1061,    0, 1048, 1057, 1064, 1051, 1060, 1074,
     1057, 1069, 1058, 1064, 1065, 1076, 1071, 1078, 1075, 1073,
     1070, 1082, 1068, 1075, 1079, 1077,    0, 1072, 1073, 1082,

     1087, 1065,    0, 1082,    0, 1079, 1079, 1099, 1096, 1101,
     1085,    0, 1088, 1074, 1094, 1092, 1097, 1105, 1110, 1097,
     1111, 1111, 1110, 1114, 1086,    0, 1116,    0, 1110, 1112,
     1116, 1122, 1101, 1123, 1108, 1111, 1110,    0, 1116,    0,
     1115, 1119, 1132, 1116, 1128, 1107, 1138, 1125,    0, 1140,
        0, 1137, 1144, 1138, 1146, 1130, 1148, 1135, 1143, 1145,
     1152, 1151, 1149, 1156, 1157, 1163, 1152, 1152, 1170, 1159,
     1154, 1162, 1160, 1161, 1146, 1170, 1165, 1149, 1176, 1170,
     1161, 1169, 1179, 1186, 1175, 1176, 1179, 1182, 1181, 1197,
     1179, 1199, 1192, 1200, 1197, 1187, 1192, 1183, 1198, 1204,

     1190, 1191, 1194, 1189, 1200, 1184, 1185, 1206, 1187, 1218,
     1200, 1212, 1204, 1203, 1222, 1194, 1212, 1226, 1219, 1206,
     1216, 1222, 1214, 1229, 1219,    0,    0, 1204, 1215, 1226,
     1213, 1232, 1235, 1236, 1237, 1238, 1224, 1230,    0, 1210,
     1202, 1197, 1198, 1200, 1211, 1216, 1202, 1203, 1219,    0,
     1207,    0,    0, 1226, 1245, 1250,    0,    0, 1245, 1256,
     1257, 1256,    0, 1257, 1247,    0,    0, 1251, 1262, 1253,
        0,    0,    0,    0, 1257,    0,    0,    0, 1251,    0,
        0,    0,    0, 1259,    0,    0, 1267, 1269, 1260, 1244,
        0, 1267, 1254, 1260, 1265,    0, 1262, 1266, 1277, 1278,

     1268, 1264, 1255,    0,    0, 1267,    0, 1286, 1269, 1278,
        0,    0, 1282, 1272, 1281, 1270, 1274, 1292, 1295, 1287,
     1291, 1297, 1287, 1284, 1290, 1291, 1296, 1289, 1287, 1285,
     1292, 1310, 1295, 1302, 1310, 1301, 1293, 1317, 1305, 1307,
     1308, 1319, 1311, 1320, 1311,    0,    0, 1304, 1319, 1298,
     1318, 1330, 1301, 1302, 1314, 1328, 1330, 1332, 1337, 1321,
     1322, 1326, 1335, 1340, 1332, 1329, 1330, 1349, 1334, 1339,
     1345, 1352, 1342, 1355, 1347, 1359, 1346, 1361, 1359, 1358,
     1348, 1361, 1347, 1360, 1358,    0,    0, 1362, 1358, 1359,
     1368, 1366, 1361, 1372, 1363, 1348, 1376,    0, 1357, 1370,

     1374, 1370, 1364, 1378, 1369, 1387, 1369, 1382, 1389, 1393,
     1383, 1376, 1373, 1397, 1381, 1386, 1396, 1390, 1384, 1399,
     1374, 1375, 1400, 1403, 1389, 1403, 1391, 1407, 1412, 1414,
     1384, 1400, 1400, 1406, 1419, 1409, 1419, 1410, 1418, 1416,
     1407, 1428, 1418, 1415, 1431,    0,    0, 1422, 1433, 1427,
     1432, 1441, 1412, 1426, 1444, 1428, 1416, 1439, 1435, 1399,
     1416, 1420,    0, 1417, 1408,    0,    0, 1423, 1405, 1413,
     1440, 1454, 1446, 1446, 1459, 1459,    0,    0, 1433, 1445,
     1452, 1451, 1464,    0, 1465,    0, 1456, 1468, 1460, 1458,
     1469,    0, 1456,    0, 1463,    0,    0, 1463, 1461, 1479,

     1467, 1462,    0, 1479, 1476, 1472, 1466,    0, 1476, 1475,
        0, 1485,    0, 1478, 1467, 1476, 1477, 1496, 1496, 1497,
     1498, 1495, 1491, 1486, 1486, 1490, 1488, 1506, 1493, 1499,
        0, 1499, 1505,    0, 1484, 1509, 1486, 1487,    0, 1501,
     1506, 1501, 1515, 1504, 1512, 1510, 1521, 1508, 1525, 1516,
     1509, 1531, 1519, 1534, 1526, 1529, 1540,    0, 1531, 1541,
     1541, 1542, 1543, 1536, 1539, 1529, 1545, 1548, 1540, 1546,
     1542, 1554, 1538, 1554, 1538, 1557, 1558,    0, 1555, 1561,
     1564, 1565, 1566, 1537, 1562,    0,    0, 1558, 1546, 1565,
     1550, 1570, 1561, 1558, 1572, 1566,    0, 1570, 1561, 1574,

     1570, 1578, 1563, 1580, 1572, 1568, 1557, 1582, 1578, 1586,
     1561, 1575, 1587, 1591, 1584, 1592, 1578, 1581, 1599, 1583,
     1601, 1585, 1599, 1600, 1585, 1595, 1596, 1597, 1601, 1602,
     1607, 1612, 1606, 1610, 1609, 1609, 1587, 1606, 1601, 1590,
     1591, 1599, 1619, 1624,    0, 1614,    0, 1612, 1612, 1598,
        0, 1625, 1613, 1631, 1619, 1620, 1632, 1605, 1619, 1633,
     1640, 1636,    0,    0,    0, 1598,    0, 1603, 1600,    0,
     1610, 1630, 1638, 1646, 1644, 1636,    0, 1654, 1638, 1640,
     1630, 1657, 1658, 1659, 1660, 1665, 1661, 1660, 1655, 1666,
     1656, 1641, 1655, 1669, 1654, 1661, 1661, 1677, 1670, 1666,

     1668, 1663, 1678, 1678, 1679, 1668, 1683, 1687, 1673, 1691,
     1677, 1686, 1674, 1683,    0, 1694, 1695, 1683, 1696, 1680,
     1683, 1682, 1685, 1687, 1687, 1702,    0, 1707, 1706, 1705,
     1707, 1693,    0, 1682, 1689, 1697, 1696, 1712, 1713, 1689,
     1709, 1719, 1704, 1719, 1710, 1712, 1708, 1728, 1716, 1711,
     1723, 1728, 1733, 1730, 1733, 1730,    0, 1719, 1728, 1732,
     1730, 1724,    0, 1724, 1739, 1740,    0, 1721, 1733, 1743,
     1746, 1741,    0, 1746,    0, 1737, 1733, 1742, 1734, 1738,
     1743, 1752, 1752, 1760, 1746, 1755,    0, 1757, 1762, 1764,
     1766, 1772, 1760, 1763,    0, 1761, 1760, 1760,    0, 1777,

     1762, 1781, 1764, 1770, 1768, 1786, 1768, 1784, 1759,    0,
     1760, 1761, 1792, 1787, 1790,    0, 1795, 1779, 1778, 1781,
        0, 1789, 1787, 1784, 1780, 1786, 1792, 1806, 1792, 1792,
     1810, 1807,    0,    0, 1812, 1790,    0, 1816, 1809, 1799,
     1816, 1820, 1816, 1809, 1823, 1807, 1819, 1824, 1827, 1814,
     1821, 1816, 1817, 1829, 1802, 1821, 1830, 1839, 1840, 1827,
     1831, 1843, 1794, 1815, 1809, 1798, 1836, 1831,    0,    0,
        0, 1847, 1838, 1850, 1853, 1839, 1840, 1840,    0, 1853,
     1858, 1856, 1845, 1833, 1835, 1849, 1849, 1849,    0, 1845,
     1858, 1868, 1849, 1874, 1856, 1856,    0, 1858, 1859, 1872,

        0,    0, 1867, 1881, 1863, 1864, 1884, 1877, 1869, 1887,
     1888, 1870, 1871,    0, 1874, 1885, 1875, 1887, 1891,    0,
     1877, 1884, 1884,    0, 1895, 1884, 1898,    0, 1888, 1896,
     1891, 1894, 1894, 1888, 1908, 1895, 1910, 1893, 1883, 1903,
     1886, 1913, 1916, 1913, 1903, 1904, 1924, 1910, 1896, 1917,
     1922,    0, 1911, 1911, 1927, 1928,    0, 1922, 1915,    0,
     1929,    0, 1922, 1923,    0, 1916,    0, 1935, 1929, 1937,
     1936, 1932, 1933, 1937, 1942, 1936, 1928, 1930, 1936, 1932,
     1946, 1949,    0, 1934,    0, 1930, 1956, 1944, 1955,    0,
     1940, 1956,    0, 1957, 1954, 1952, 1950, 1963,    0, 1944,

     1952, 1962, 1939, 1951, 1959, 1971, 1959, 1960, 1974, 1968,
     1967, 1968, 1952, 1979, 1970, 1983, 1986, 1983, 1969, 1986,
     1977, 1980, 1972, 1993, 1991, 1992, 1977,    0,    0,    0,
     1994, 1987,    0,    0, 1982, 2000, 1997, 1998, 1995, 1991,
     1975, 1976, 1983, 1996, 1988, 1998, 1991, 1982, 2008, 2010,
     2007, 2013, 2015, 2002, 2009, 2021, 2005, 2010, 2020, 2015,
        0, 1992, 1993, 1980,    0, 2012, 2018, 2020, 2016, 2030,
     2031, 2028,    0,    0, 2019,    0, 2028, 2021, 2036, 2031,
     2040, 2020, 2026,    0,    0, 2042, 2034,    0, 2024,    0,
     2047, 2037,    0, 2033, 2047, 2035,    0, 2047, 2039, 2044,

     2054, 2042, 2043,    0,    0, 2057,    0, 2055,    0, 2050,
     2047,    0, 2045, 2045, 2047, 2064, 2049, 2066, 2067, 2068,
     2058, 2074, 2058, 2072, 2060, 2078, 2057, 2058, 2070, 2065,
     2083, 2073, 2081, 2084, 2081, 2085, 2076,    0, 2073, 2062,
     2091, 2065, 2092,    0,    0, 2080, 2079,    0, 2091,    0,
        0, 2087, 2083,    0, 2083,    0, 2092, 2100, 2105, 2100,
     2088, 2108, 2108, 2096, 2097,    0, 2082, 2083, 2102,    0,
     2095, 2116, 2113,    0,    0, 2088, 2098, 2105, 2110, 2122,
     2093, 2094, 2121, 2126, 2097, 2129, 2126, 2118, 2132, 2133,
     2119, 2129,    0, 2106, 2131, 2108, 2129,    0, 2118, 2131,

     2141, 2140, 2128, 2145, 2134, 2124, 2145, 2149, 2137, 2146,
     2123,    0,    0, 2150, 2153, 2133, 2155, 2154, 2140, 2157,
     2159,    0, 2157, 2160, 2157, 2148, 2165, 2162, 2164, 2161,
     2170, 2158, 2162, 2173, 2164, 2169, 2162,    0, 2178, 2180,
     2154, 2141, 2136, 2137, 2149,    0, 2170, 2160, 2161, 2179,
     2188, 2188, 2165, 2192, 2193, 2180, 2199, 2193, 2184,    0,
     2202,    0, 2173,    0, 2197, 2192,    0, 2187, 2203, 2194,
     2190, 2204,    0, 2201, 2209,    0,    0,    0, 2206, 2202,
        0, 2216, 2198, 2203, 2202, 2203, 2219,    0, 2211, 2219,
     2206, 2211, 2214, 2214, 2198, 2199, 2222, 2229, 2232, 2233,

     2234, 2227,    0,    0, 2206, 2226, 2234, 2237, 2226, 2239,
     2225,    0, 2239, 2233,    0,    0,    0, 2241, 2228, 2229,
     2241, 2249, 2232, 2250, 2239, 2250, 2246, 2253,    0, 2245,
     2240, 2242, 2248, 2257, 2255, 2249, 2253, 2248, 2265,    0,
     2259, 2259, 2272, 2264, 2258, 2271, 2275, 2263, 2278, 2278,
     2273, 2273, 2275, 2287, 2284, 2259, 2262, 2282, 2264, 2287,
     2282, 2294,    0, 2281,    0, 2278, 2297, 2298, 2290, 2300,
     2303, 2287, 2304, 2304, 2305, 2293, 2297, 2307, 2305, 2306,
     2298, 2299, 2298, 2314, 2315, 2309, 2313, 2316, 2319, 2319,
     2317, 2307, 2297, 2317, 2315,    0,    0,    0, 2330, 2297,

     2301,    0, 2288, 2330, 2324, 2345, 2319, 2320, 2333, 2342,
     2340, 2325, 2338, 2340, 2345, 2331, 2335, 2333, 2339,    0,
        0, 2345, 2351, 2342,    0,    0,    0,    0, 2354, 2338,
     2341, 2359,    0,    0,    0, 2341,    0, 2361, 2360, 2343,
     2360, 2361, 2366, 2349, 2368, 2371, 2361, 2362, 2363, 2367,
     2371, 2349, 2351, 2369, 2374, 2388, 2359,    0, 2386,    0,
     2384, 2374, 2374, 2383, 2376, 2392, 2393,    0, 2385, 2391,
     2376, 2401, 2391, 2388, 2390, 2386,    0,    0, 2406, 2377,
     2408, 2392, 2406, 2394, 2408, 2399, 2412, 2400, 2405, 2417,
     2410, 2405, 2410, 2413,    0, 2403, 2415, 2420, 2421, 2422,

     2427, 2424, 2416, 2413, 2408, 2408, 2430, 2429, 2431, 2418,
     2435, 2415, 2428, 2421, 2423,    0, 2439, 2424,    0, 2430,
     2431,    0, 2443, 2442, 2441, 2431, 2446, 2429, 2441, 2454,
     2425, 2426, 2446, 2453, 2435, 2458, 2454, 2444, 2452, 2462,
     2451, 2461, 2467, 2454, 2450,    0, 2422, 2427, 2455, 2469,
     2466,    0,    0, 2471,    0, 2457, 2464, 2478,    0,    0,
     2465,    0, 2470, 2477, 2467, 2464, 2480,    0,    0,    0,
     2455,    0, 2482, 2479, 2484,    0,    0, 2474,    0, 2473,
     2480, 2475, 2493, 2483, 2478, 2496, 2495, 2494, 2485, 2481,
     2497, 2472, 2500, 2501, 2501, 2492, 2499, 2504, 2507, 2496,

     2498, 2493, 2501, 2514,    0,    0,    0,    0,    0, 2507,
     2499,    0, 2496, 2501, 2508, 2502, 2521, 2515, 2506,    0,
     2506, 2513,    0,    0,    0, 2524, 2516, 2517, 2529, 2523,
     2517, 2521, 2520, 2516,    0, 2522, 2506, 2517,    0, 2535,
        0, 2521,    0, 2534, 2527, 2527,    0, 2543, 2533, 2541,
     2516, 2527, 2529,    0,    0,    0,    0, 2543,    0, 2536,
     2535,    0, 2542, 2552, 2541, 2548,    0, 2553, 2528, 2553,
     2548, 2547, 2551, 2533, 2556, 2547, 2565, 2564, 2550, 2553,
     2554, 2561, 2563, 2558, 2528, 2530,    0, 2575, 2575, 2565,
        0, 2577, 2578, 2574, 2582, 2569,    0,    0, 2585, 2577,

     2572, 2580, 2589,    0,    0, 2582, 2590, 2583, 2572, 2583,
     2585, 2582, 2583, 2581, 2572, 2585, 2593, 2575, 2576,    0,
     2599, 2595, 2592, 2610, 2589, 2593, 2596, 2610, 2602, 2614,
        0, 2613, 2601, 2611, 2610, 2608, 2618, 2603, 2614, 2625,
     2596, 2613, 2614, 2618, 2630, 2614, 2628, 2629, 2604,    0,
     2633, 2618, 2607, 2628, 2628, 2625, 2630, 2630, 2626, 2620,
     2628, 2644, 2634, 2618, 2645, 2633,    0, 2647, 2633, 2636,
     2652, 2637, 2653, 2646, 2654, 2645, 2661, 2648, 2649, 2650,
     2661, 2646, 2663,    0, 2668, 2667, 2662, 2641, 2672, 2669,
        0, 2657,    0,    0, 2656, 2669,    0, 2666,    0, 2675,

     2676, 2673, 2673, 2678,    0,    0,    0, 2653, 2684, 2685,
        0, 2666, 2684, 2680, 2672, 2677, 2676, 2674, 2685, 2679,
     2695, 2683, 2687, 2687, 2688, 2688, 2685, 2689, 2687, 2697,
        0, 2690, 2694, 2696,    0, 2707, 2695, 2698,    0, 2699,
     2706, 2717, 2703, 2717,    0,    0,    0, 2722, 2711, 2710,
        0, 2713,    0, 2722,    0, 2713, 2728, 2725,    0, 2713,
     2717, 2725,    0, 2718,    0, 2731, 2733, 2728, 2707, 2730,
     2737, 2736, 2727, 2725, 2713, 2725, 2726, 2735, 2737, 2746,
     2734, 2737, 2740, 2733, 2739, 2751, 2743,    0, 2756,    0,
     2738, 2754,    0,    0, 2745, 2760, 2761, 2748, 2744, 2758,

     2751, 2755, 2753, 2769, 2768, 2752, 2743, 2756, 2775, 2770,
     2773, 2764, 2780, 2773, 2775, 2769, 2765, 2767, 2779, 2784,
     2785, 2779, 2783, 2795, 2784, 2778, 2781, 2797,    0, 2797,
        0, 2792, 2803, 2796, 2775, 2776, 2790, 2808, 2789, 2810,
     2781, 2809, 2807, 2812, 2815, 2805, 2793, 2799,    0, 2801,
     2807, 2819, 2819, 2824, 2823, 2825, 2810, 2814, 2825, 2816,
     2820, 2802, 2814,    0, 2832, 2831, 2828, 2824, 2835, 2835,
     2833, 2838, 2842,    0,    0, 2834,    0, 2833, 2846, 2844,
     2845, 2820, 2851, 2833, 2848, 2824, 2837, 2850, 2838, 2840,
     2855, 2841, 2844, 2849, 2844, 2865, 2841, 2853, 2845, 2857,

     2855, 2860, 2861, 2855,    0, 2856, 2858, 2859, 2866, 2860,
        0, 2879,    0,    0, 2876,    0,    0, 2863, 2863, 2871,
     2872, 2855, 2868, 2874, 2865, 2876, 2888, 2887, 2888, 2874,
     2889, 2884, 2878, 2879, 2890, 2886, 2896, 2893, 2889, 2892,
     2891, 2906, 2907, 2895, 2892, 2893, 2881, 2911, 2905, 2890,
        0, 2901, 2886, 2915, 2901, 2914, 2908,    0, 2902, 2919,
        0, 2914, 2894,    0, 2912, 2908, 2909, 2914, 2917, 2925,
     2916, 2926,    0, 2917, 2923, 2923, 2936, 2924, 2922, 2917,
     2938, 2928, 2925, 2941, 2942, 2933,    0,    0, 2930, 2949,
     2932, 2933,    0, 2933, 2936, 2944, 2931, 2956, 2957, 2946,

     2949, 2941,    0,    0, 2947,    0,    0, 2932, 2949, 2956,
     2957, 2959, 2953, 2938, 2967, 2953, 2959, 2970, 2969, 2954,
     2964, 2968, 2966, 2948, 2949, 2966, 2981, 2963, 2969,    0,
     2971, 2966, 2986, 2983, 2970, 2985, 2982,    0, 2987, 2986,
     2992, 2992, 2985,    0, 2979, 2984, 2984, 2985, 2983, 2972,
     2984, 2974,    0, 2975, 3002,    0,    0,    0, 2987,    0,
        0, 3008, 3001,    0, 3003,    0, 3003,    0,    0, 2982,
     2995, 2996, 3015,    0,    0, 3003, 2998, 3001, 3001, 3018,
     3007, 3009, 3004, 3024, 3021, 3022, 3003,    0, 3013, 2999,
     3017, 3007, 3018, 3013, 3021, 3022, 3032, 3024, 3008, 3031,

     3016, 3039, 3038, 3025, 3030, 3043, 3029, 3046, 3039, 3032,
        0, 3038, 3040, 3051, 3033, 3035, 3044,    0, 3056, 3039,
        0, 3041, 3056, 3046, 3053, 3048, 3051, 3054, 3055, 3048,
     3063, 3064, 3057, 3062, 3053, 3071, 3043, 3066, 3051, 3074,
     3059,    0, 3067, 3072, 3050,    0, 3068, 3067, 3072, 3074,
     3081, 3056, 3083, 3076, 3059, 3071, 3072, 3090, 3080, 3075,
     3081, 3087, 3093, 3090,    0, 3075, 3091, 3086,    0, 3095,
     3093, 3101, 3102,    0, 3094, 3093, 3096, 3110,    0,    0,
     3101, 3082, 3102,    0, 3100,    0, 3106, 3112, 3105, 3088,
     3100, 3118, 3117, 3118, 3109, 3113,    0, 3101,    0, 3109,

     3107, 3123, 3121, 3126, 3113, 3125,    0, 3134, 3105, 3106,
     3117, 3134, 3137, 3125,    0, 3137,    0, 3124, 3135, 3125,
        0, 3127,    0,    0, 3128,    0, 3143, 3144, 3136, 3146,
     3146, 3144, 3149, 3135, 3147, 3156, 3154, 3150, 3146, 3136,
        0,    0, 3146, 3157, 3151, 3146, 3157, 3152, 3156, 3164,
     3165, 3155, 3169, 3153, 3154, 3172, 3156, 3170,    0,    0,
     3167, 3166, 3164, 3162, 3179, 3177, 3172, 3167, 3178, 3173,
     3177,    0, 3183, 3179,    0,    0, 3183, 3188, 3191, 3182,
     3182, 3192, 3192, 3190, 3186, 3170, 3182, 3172, 3185, 3185,
        0, 3192,    0, 3191, 3193,    0, 3189, 3201, 3206, 3209,

     3200, 3200, 3210, 3208, 3192, 3215, 3200, 3219, 3216,    0,
        0, 3216, 3210, 3204, 3210, 3207, 3222,    0,    0,    0,
     3208, 3211,    0, 3227, 3212, 3231, 3228,    0,    0, 3214,
        0, 3226, 3233, 3225, 3219, 3230, 3235, 3223, 3240,    0,
     3229, 3219, 3225, 3237, 3244, 3236, 3230,    0, 3245, 3250,
     3247, 3250, 3251, 3236, 3231, 3247, 3238,    0,    0, 3254,
     3259, 3256, 3259, 3249, 3252,    0, 3264, 3257, 3264,    0,
     3263, 3251, 3256, 3259,    0, 3271, 3270, 3269, 3263, 3271,
     3276, 3275, 3254, 3277, 3276, 3270, 3258,    0, 3279, 3271,
     3274, 3267,    0, 3263,    0, 3284,    0,    0, 3287, 3286,

     3273,    0,    0, 3268,    0,    0,    0, 3824, 3318, 3320,
     3322
    } ;

static yyconst flex_int16_t yy_def[3712] =
    {   0,
     3708,    1, 3708, 3708, 3708, 3708, 3708, 3709, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3708, 3708, 3708, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3708, 3708,
     3708, 3708, 3708, 3709, 3708, 3709, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3711, 3708, 3708, 3708, 3708, 3708, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3709, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3711, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3708, 3708, 3708, 3708, 3708, 3708, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3708, 3708, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,

     3710, 3710, 3710, 3710, 3710, 3710, 3710,    0, 3708, 3708,
     3708
    } ;

static yyconst flex_int16_t yy_nxt[3911] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   28,   33,   34,   28,   28,   35,   36,   37,   38,
       39,   28,   40,   41,   42,   43,   44,   28,   28,   28,
       45,   46,    4,   47,   48,   28,   49,   28,   50,   51,
       52,   53,   28,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   28,   67,   68,   28,
       28,   28,   69,   70,   71,   72,   75,   80,   82,   84,
       84,   84,   84,   92,   93,   85,   95,   96,   83,   81,

       86,   88,  793,   89,   89,   89,   89,   88,   87,   89,
       89,   89,   89,  794,  103,   98,  107,   90,  113,   99,
      108,  104,  142,   90,  100,  105,  101,  126,  106,  143,
      150,  127,  102,  151,   76,  129,   91,   75,  120,  114,
      829,  128,  121,  153,  168,  130,  122,  115,   90,  131,
      133,  154,  132,  116,   90,  123,  124,  144,  125,  169,
      134,  145,   75,  135,  147,  148,  161,   91,  136,  157,
      137,  146,  165,  170,  149,  193,  200,  158,  162,  171,
      194,  201,  166,  392,  237,   76,  238,  393,  167,   84,
       84,   84,   84,  177,  177,  177,  177,   88,  830,   89,

       89,   89,   89,  175,  176,  206,  207,  178,  179,  180,
       76,  180,  208,   90,  181,  181,  181,  181,  216,  210,
      220,  234,  251,  224,  217,  255,  266,  252,  181,  181,
      181,  181,  833,  218,  175,  176,  211,  221,  178,  179,
      225,  235,  253,  267,   90,  256,  261,  302,  537,  272,
      254,  272,  538,  262,  273,  273,  273,  273,  177,  177,
      177,  177,  276,  514,  276,  303,  515,  277,  277,  277,
      277,  394,  274,  275,  181,  181,  181,  181,  329,  471,
      330,  273,  273,  273,  273,  273,  273,  273,  273,  366,
      472,  366,  632,  395,  367,  367,  367,  367,  593,  473,

      176,  633,  594,  274,  275,  277,  277,  277,  277,  277,
      277,  277,  277,  367,  367,  367,  367,  367,  367,  367,
      367,  463,  597,  602,  179,  480,  598,  603,  836,  837,
      785,  176,  275,  464,  465,  466,  599,  467,  468,  475,
      476,  477,  481,  482,  483,  478,  479,  485,  630,  498,
      486,  499,  487,  643,  786,  179,  813,  637,  814,  488,
      489,  500,  631,  275,  638,  504,  505,  838,  501,  506,
      507,  508,  529,  644,  698,  530,  509,  531,  839,  510,
      699,  511,  512,  513,  532,  533,  687,  640,  534,  567,
      568,  569,  641,  642,  570,  787,  740,  571,  689,  772,

      688,  572,  827,  573,  828,  788,  690,  574,  575,  691,
      741,  576,  703,  704,  705,  712,  713,  773,  714,  706,
      715,  840,  831,  707,  708,  709,  834,  710,  835,  711,
      716,  753,  754,  843,  844,  755,  832,  762,  763,  845,
      764,  846,  756,  757,  758,  841,  759,  765,  847,  760,
      761,  803,  804,  805,  848,  842,  849,  850,  851,  852,
      853,  854,  855,  856,  857,  806,  858,  807,  808,  859,
      860,  862,  863,  872,  861,  865,  866,  873,  867,  875,
      883,  884,  868,  885,  886,  897,  869,  874,  864,  870,
      887,  871,  876,  877,  905,  878,  888,  906,  907,  879,

      908,  909,  889,  880,  890,  910,  881,  898,  882,  899,
      891,  900,  911,  892,  912,  913,  893,  901,  902,  894,
      895,  896,  914,  903,  915,  916,  904,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  976,  990,

      991,  992,  997,  993,  998,  999, 1000,  989, 1001, 1002,
     1003, 1004,  994, 1005, 1006,  995, 1013, 1014, 1007,  996,
     1008, 1015, 1016, 1017, 1009, 1018, 1019, 1020, 1021, 1022,
     1010, 1023, 1011, 1024, 1012, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
     1050, 1051, 1052, 1054, 1055, 1056, 1053, 1058, 1059, 1061,
     1063, 1064, 1065, 1067, 1068, 1069, 1060, 1070, 1071, 1073,
     1062, 1076, 1074, 1066, 1078, 1079, 1080, 1082, 1083, 1057,
     1075, 1084, 1077, 1085, 1086, 1087, 1088, 1081, 1089, 1090,

     1091, 1092, 1072, 1093, 1094, 1096, 1097, 1098, 1099, 1095,
     1100, 1101, 1103, 1104, 1102, 1106, 1107, 1108, 1109, 1105,
     1110, 1113, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
     1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
     1141, 1130, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172, 1173, 1179, 1180, 1181, 1182, 1183, 1184,
     1174, 1185, 1186, 1188, 1175, 1189, 1176, 1177, 1190, 1191,

     1192, 1178, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1202, 1203, 1204, 1205, 1206, 1187, 1208, 1209, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1207, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,

     1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1293, 1305, 1306, 1307, 1308, 1309,
     1310, 1312, 1313, 1314, 1315, 1316, 1317, 1311, 1324, 1325,
     1318, 1326, 1327, 1328, 1329, 1319, 1330, 1320, 1321, 1331,
     1336, 1337, 1322, 1323, 1338, 1332, 1333, 1339, 1340, 1341,
     1334, 1335, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
     1350, 1351, 1352, 1353, 1354, 1355, 1362, 1363, 1356, 1364,
     1365, 1366, 1369, 1357, 1370, 1358, 1371, 1372, 1373, 1374,
     1359, 1360, 1375, 1376, 1361, 1377, 1367, 1368, 1378, 1379,
     1380, 1381, 1386, 1396, 1394, 1387, 1388, 1397, 1398, 1389,

     1399, 1402, 1405, 1390, 1382, 1395, 1383, 1384, 1385, 1391,
     1392, 1400, 1403, 1393, 1406, 1407, 1404, 1408, 1409, 1401,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1441, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1451, 1452, 1453, 1454, 1455, 1442, 1456, 1457, 1458, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
     1481, 1482, 1483, 1484, 1485, 1486, 1470, 1487, 1488, 1489,

     1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
     1520, 1522, 1521, 1523, 1524, 1525, 1526, 1527, 1528, 1530,
     1531, 1532, 1533, 1534, 1535, 1536, 1540, 1537, 1541, 1544,
     1529, 1538, 1542, 1543, 1545, 1539, 1546, 1547, 1548, 1549,
     1550, 1551, 1552, 1553, 1554, 1555, 1560, 1556, 1557, 1561,
     1564, 1566, 1568, 1569, 1570, 1571, 1572, 1565, 1575, 1567,
     1562, 1576, 1558, 1578, 1559, 1579, 1563, 1573, 1574, 1580,
     1581, 1577, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,

     1590, 1591, 1592, 1596, 1597, 1598, 1593, 1594, 1595, 1599,
     1600, 1601, 1602, 1603, 1605, 1607, 1608, 1609, 1610, 1612,
     1606, 1611, 1613, 1614, 1615, 1616, 1604, 1617, 1618, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
     1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
     1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
     1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
     1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
     1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,

     1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
     1700, 1701, 1702, 1703, 1704, 1706, 1707, 1708, 1709, 1710,
     1705, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
     1721, 1722, 1723, 1724, 1725, 1720, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1734, 1735, 1733, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1744, 1745, 1749, 1750, 1751, 1754,
     1752, 1755, 1756, 1758, 1759, 1760, 1746, 1753, 1761, 1762,
     1763, 1764, 1747, 1765, 1766, 1748, 1767, 1768, 1769, 1757,
     1770, 1771, 1773, 1774, 1775, 1776, 1777, 1772, 1778, 1779,
     1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1790,

     1791, 1792, 1793, 1794, 1795, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1789, 1804, 1805, 1806, 1796, 1807, 1808, 1809,
     1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
     1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1835,
     1829, 1833, 1830, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
     1843, 1845, 1846, 1847, 1831, 1832, 1834, 1848, 1849, 1850,
     1851, 1852, 1844, 1854, 1853, 1855, 1856, 1857, 1858, 1859,
     1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
     1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
     1880, 1881, 1882, 1883, 1884, 1885, 1886, 1889, 1890, 1887,

     1891, 1892, 1893, 1894, 1888, 1895, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1908, 1909, 1910, 1911, 1896, 1897, 1898,
     1912, 1913, 1899, 1900, 1914, 1915, 1916, 1917, 1918, 1919,
     1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
     1930, 1931, 1932, 1933, 1934, 1935, 1936, 1940, 1941, 1942,
     1943, 1944, 1945, 1948, 1937, 1946, 1949, 1950, 1938, 1939,
     1951, 1947, 1952, 1953, 1954, 1955, 1957, 1958, 1959, 1961,
     1962, 1963, 1960, 1956, 1964, 1965, 1966, 1967, 1968, 1969,
     1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,

     1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
     2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
     2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
     2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
     2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
     2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
     2054, 2055, 2056, 2062, 2050, 2057, 2058, 2059, 2051, 2052,
     2053, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2060, 2070,
     2071, 2072, 2073, 2061, 2074, 2075, 2076, 2077, 2078, 2079,
     2080, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,

     2091, 2092, 2093, 2095, 2081, 2096, 2097, 2098, 2099, 2100,
     2101, 2102, 2103, 2094, 2104, 2105, 2106, 2107, 2108, 2109,
     2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
     2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
     2130, 2132, 2133, 2131, 2135, 2136, 2137, 2138, 2139, 2140,
     2141, 2142, 2134, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
     2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
     2170, 2171, 2172, 2173, 2180, 2181, 2182, 2183, 2174, 2175,
     2184, 2185, 2176, 2186, 2177, 2178, 2187, 2188, 2189, 2179,

     2190, 2191, 2192, 2193, 2194, 2195, 2196, 2199, 2197, 2200,
     2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
     2211, 2212, 2213, 2214, 2198, 2215, 2216, 2217, 2218, 2219,
     2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2239, 2240, 2241,
     2242, 2243, 2244, 2245, 2246, 2247, 2248, 2252, 2249, 2253,
     2237, 2250, 2238, 2254, 2255, 2257, 2258, 2259, 2260, 2261,
     2262, 2263, 2264, 2251, 2265, 2266, 2267, 2268, 2256, 2269,
     2270, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2271,
     2281, 2282, 2283, 2284, 2285, 2272, 2286, 2287, 2288, 2289,

     2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299,
     2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309,
     2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319,
     2320, 2321, 2322, 2323, 2328, 2329, 2324, 2330, 2331, 2325,
     2332, 2333, 2334, 2335, 2336, 2337, 2326, 2327, 2338, 2339,
     2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349,
     2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359,
     2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369,
     2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379,
     2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2392, 2389,

     2388, 2390, 2391, 2393, 2394, 2395, 2396, 2397, 2398, 2399,
     2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409,
     2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419,
     2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429,
     2430, 2431, 2434, 2432, 2435, 2436, 2437, 2438, 2439, 2440,
     2433, 2441, 2442, 2444, 2445, 2446, 2447, 2448, 2449, 2450,
     2451, 2452, 2453, 2454, 2455, 2456, 2443, 2457, 2459, 2460,
     2461, 2462, 2463, 2464, 2465, 2458, 2466, 2467, 2468, 2469,
     2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479,
     2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489,

     2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499,
     2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2500,
     2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519,
     2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529,
     2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539,
     2540, 2541, 2544, 2542, 2545, 2546, 2547, 2548, 2549, 2550,
     2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2543,
     2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569,
     2570, 2571, 2572, 2573, 2574, 2575, 2581, 2576, 2578, 2582,
     2583, 2584, 2587, 2585, 2577, 2586, 2579, 2588, 2589, 2590,

     2591, 2592, 2593, 2580, 2594, 2595, 2596, 2597, 2598, 2599,
     2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
     2610, 2611, 2612, 2613, 2614, 2616, 2617, 2618, 2619, 2620,
     2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2615, 2629,
     2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639,
     2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649,
     2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659,
     2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669,
     2671, 2676, 2677, 2670, 2678, 2679, 2680, 2681, 2682, 2683,
     2672, 2684, 2686, 2673, 2685, 2688, 2674, 2675, 2689, 2690,

     2691, 2693, 2694, 2695, 2692, 2696, 2697, 2699, 2687, 2700,
     2701, 2702, 2703, 2706, 2707, 2704, 2705, 2708, 2709, 2710,
     2711, 2712, 2698, 2713, 2714, 2715, 2716, 2717, 2718, 2719,
     2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729,
     2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739,
     2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749,
     2750, 2752, 2753, 2754, 2755, 2756, 2751, 2757, 2759, 2760,
     2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2758, 2769,
     2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
     2780, 2781, 2789, 2782, 2783, 2790, 2784, 2785, 2791, 2792,

     2793, 2794, 2786, 2795, 2799, 2796, 2800, 2797, 2801, 2787,
     2788, 2798, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819,
     2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829,
     2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839,
     2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849,
     2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860,
     2861, 2862, 2863, 2850, 2864, 2865, 2866, 2867, 2868, 2869,
     2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879,
     2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889,

     2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899,
     2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909,
     2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919,
     2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929,
     2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939,
     2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949,
     2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2960,
     2961, 2962, 2963, 2964, 2965, 2966, 2959, 2967, 2968, 2969,
     2970, 2971, 2972, 2973, 2974, 2978, 2980, 2981, 2982, 2983,
     2979, 2984, 2985, 2986, 2987, 2988, 2989, 2975, 2976, 2990,

     2977, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999,
     3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009,
     3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,
     3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029,
     3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039,
     3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049,
     3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059,
     3060, 3061, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070,
     3071, 3072, 3073, 3074, 3062, 3075, 3076, 3077, 3078, 3079,
     3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089,

     3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099,
     3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109,
     3110, 3117, 3118, 3111, 3119, 3120, 3121, 3122, 3123, 3124,
     3125, 3112, 3126, 3127, 3128, 3113, 3129, 3130, 3114, 3115,
     3116, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139,
     3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149,
     3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159,
     3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169,
     3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181,
     3170, 3182, 3183, 3184, 3185, 3171, 3186, 3187, 3188, 3189,

     3190, 3191, 3193, 3194, 3199, 3195, 3197, 3202, 3200, 3204,
     3205, 3203, 3206, 3207, 3208, 3192, 3196, 3198, 3209, 3210,
     3211, 3212, 3213, 3214, 3201, 3215, 3216, 3217, 3218, 3219,
     3220, 3221, 3222, 3223, 3224, 3225, 3227, 3228, 3229, 3230,
     3231, 3232, 3233, 3226, 3234, 3235, 3236, 3237, 3239, 3240,
     3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250,
     3251, 3252, 3253, 3238, 3254, 3256, 3257, 3258, 3255, 3259,
     3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269,
     3270, 3271, 3273, 3274, 3275, 3276, 3272, 3277, 3278, 3279,
     3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289,

     3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299,
     3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309,
     3310, 3311, 3312, 3313, 3314, 3315, 3317, 3318, 3319, 3316,
     3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3329, 3330,
     3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340,
     3343, 3341, 3344, 3345, 3328, 3342, 3346, 3347, 3348, 3349,
     3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359,
     3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369,
     3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379,
     3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389,

     3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399,
     3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3409, 3410,
     3411, 3412, 3413, 3414, 3415, 3408, 3416, 3417, 3418, 3419,
     3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429,
     3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439,
     3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449,
     3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459,
     3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469,
     3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479,
     3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489,

     3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499,
     3500, 3501, 3502, 3504, 3505, 3506, 3507, 3508, 3509, 3510,
     3511, 3512, 3513, 3514, 3515, 3516, 3517, 3503, 3518, 3519,
     3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529,
     3530, 3531, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540,
     3541, 3542, 3543, 3544, 3545, 3546, 3532, 3547, 3548, 3549,
     3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559,
     3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569,
     3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579,
     3580, 3581, 3582, 3583, 3585, 3586, 3587, 3588, 3589, 3590,

     3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3584, 3599,
     3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609,
     3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619,
     3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629,
     3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639,
     3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649,
     3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659,
     3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669,
     3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679,
     3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689,

     3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699,
     3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707,   74,   74,
       74,   97,   97,  182,  826,  825,  824,  823,  822,  821,
      820,  819,  818,  817,  816,  815,  812,  811,  810,  809,
      802,  801,  800,  799,  798,  797,  796,  795,  792,  791,
      790,  789,  784,  783,  782,  781,  780,  779,  778,  777,
      776,  775,  774,  771,  770,  769,  768,  767,  766,  752,
      751,  750,  749,  748,  747,  746,  745,  744,  743,  742,
      739,  738,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  720,

      719,  718,  717,  702,  701,  700,  697,  696,  695,  694,
      693,  692,  686,  685,  684,  683,  682,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  662,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  645,  639,  636,  635,  634,  629,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  619,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  601,  600,  596,  595,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,

      580,  579,  578,  577,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  536,  535,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  503,  502,  497,
      496,  495,  494,  493,  492,  491,  490,  484,  474,  470,
      469,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,

      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,

      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  271,  270,  269,  268,
      265,  264,  263,  260,  259,  258,  257,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  236,
      233,  232,  231,  230,  229,  228,  227,  226,  223,  222,
      219,  215,  214,  213,  212,  209,  205,  204,  203,  202,
      199,  198,  197,  196,  195,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  183, 3708,  174,  173,  172,  164,

      163,  160,  159,  156,  155,  152,  141,  140,  139,  138,
      119,  118,  117,  112,  111,  110,  109,   94,   79,   78,
       77,   73, 3708,    3, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,

     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708
    } ;

static yyconst flex_int16_t yy_chk[3911] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    8,   14,   16,   17,
       17,   17,   17,   23,   23,   18,   25,   25,   16,   14,

       18,   19,  643,   19,   19,   19,   19,   20,   18,   20,
       20,   20,   20,  643,   29,   27,   30,   19,   35,   27,
       30,   29,   50,   20,   27,   29,   27,   40,   29,   50,
       53,   40,   27,   53,    8,   41,   19,   74,   39,   35,
      676,   40,   39,   55,   65,   41,   39,   35,   19,   41,
       42,   55,   41,   35,   20,   39,   39,   51,   39,   65,
       42,   51,  113,   42,   52,   52,   61,   19,   42,   58,
       42,   51,   64,   66,   52,  108,  115,   58,   61,   66,
      108,  115,   64,  303,  143,   74,  143,  303,   64,   84,
       84,   84,   84,   88,   88,   88,   88,   89,  677,   89,

       89,   89,   89,   84,   84,  120,  120,   88,   88,   90,
      113,   90,  120,   89,   90,   90,   90,   90,  127,  122,
      129,  141,  158,  132,  127,  160,  169,  158,  180,  180,
      180,  180,  679,  127,   84,   84,  122,  129,   88,   88,
      132,  141,  159,  169,   89,  160,  165,  208,  418,  175,
      159,  175,  418,  165,  175,  175,  175,  175,  177,  177,
      177,  177,  178,  399,  178,  208,  399,  178,  178,  178,
      178,  304,  177,  177,  181,  181,  181,  181,  234,  381,
      234,  272,  272,  272,  272,  273,  273,  273,  273,  274,
      381,  274,  506,  304,  274,  274,  274,  274,  472,  381,

      273,  506,  472,  177,  177,  276,  276,  276,  276,  277,
      277,  277,  277,  366,  366,  366,  366,  367,  367,  367,
      367,  377,  475,  478,  277,  384,  475,  478,  681,  682,
      637,  273,  367,  377,  377,  377,  475,  377,  377,  383,
      383,  383,  384,  384,  384,  383,  383,  386,  505,  395,
      386,  395,  386,  513,  637,  277,  658,  510,  658,  386,
      386,  395,  505,  367,  510,  398,  398,  683,  395,  398,
      398,  398,  415,  513,  574,  415,  398,  415,  684,  398,
      574,  398,  398,  398,  415,  415,  565,  512,  415,  455,
      455,  455,  512,  512,  455,  638,  604,  455,  567,  625,

      565,  455,  674,  455,  674,  638,  567,  455,  455,  567,
      604,  455,  579,  579,  579,  580,  580,  625,  580,  579,
      580,  685,  678,  579,  579,  579,  680,  579,  680,  579,
      580,  616,  616,  687,  688,  616,  678,  617,  617,  689,
      617,  690,  616,  616,  616,  686,  616,  617,  691,  616,
      616,  653,  653,  653,  692,  686,  693,  694,  695,  696,
      697,  698,  699,  700,  701,  653,  702,  653,  653,  703,
      704,  705,  706,  708,  704,  707,  707,  709,  707,  710,
      712,  713,  707,  714,  715,  718,  707,  709,  706,  707,
      716,  707,  711,  711,  720,  711,  716,  721,  722,  711,

      723,  724,  717,  711,  717,  725,  711,  719,  711,  719,
      717,  719,  726,  717,  727,  728,  717,  719,  719,  717,
      717,  717,  729,  719,  730,  731,  719,  732,  733,  734,
      735,  736,  737,  738,  739,  740,  741,  742,  743,  745,
      746,  747,  748,  749,  750,  751,  753,  754,  755,  756,
      757,  758,  759,  760,  761,  762,  763,  764,  765,  766,
      767,  769,  771,  772,  773,  774,  775,  776,  777,  778,
      779,  780,  781,  782,  783,  784,  785,  786,  787,  788,
      789,  790,  791,  792,  793,  794,  795,  796,  797,  798,
      799,  800,  801,  803,  804,  805,  806,  807,  794,  808,

      809,  810,  811,  810,  812,  813,  814,  807,  816,  817,
      818,  819,  810,  820,  820,  810,  821,  822,  820,  810,
      820,  823,  824,  825,  820,  826,  827,  828,  829,  830,
      820,  831,  820,  832,  820,  833,  834,  835,  836,  837,
      838,  840,  841,  842,  843,  844,  845,  846,  847,  848,
      849,  850,  851,  852,  853,  854,  855,  856,  857,  859,
      860,  861,  862,  863,  864,  865,  862,  866,  867,  868,
      869,  870,  871,  872,  873,  874,  867,  875,  876,  877,
      868,  879,  878,  871,  880,  881,  882,  883,  884,  865,
      878,  885,  879,  886,  887,  888,  889,  882,  890,  891,

      892,  893,  876,  894,  895,  896,  897,  898,  899,  895,
      900,  901,  902,  903,  901,  904,  907,  908,  909,  903,
      910,  911,  910,  910,  912,  913,  914,  915,  916,  917,
      918,  919,  920,  921,  922,  923,  924,  925,  926,  927,
      930,  932,  933,  935,  936,  937,  938,  939,  940,  941,
      942,  927,  943,  944,  945,  946,  947,  948,  949,  950,
      951,  953,  955,  958,  959,  960,  961,  962,  964,  965,
      966,  967,  968,  969,  970,  971,  972,  974,  975,  976,
      977,  978,  979,  979,  980,  981,  982,  983,  984,  985,
      979,  986,  987,  988,  979,  989,  979,  979,  990,  991,

      992,  979,  993,  994,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1004, 1005, 1006,  987, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1026, 1006, 1027, 1028, 1029, 1030,
     1031, 1032, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043,
     1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,

     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1107, 1108, 1096, 1109, 1110, 1111, 1112, 1113,
     1115, 1116, 1117, 1118, 1119, 1119, 1119, 1115, 1120, 1123,
     1119, 1126, 1127, 1128, 1129, 1119, 1130, 1119, 1119, 1131,
     1132, 1135, 1119, 1119, 1136, 1131, 1131, 1137, 1138, 1139,
     1131, 1131, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
     1150, 1151, 1152, 1153, 1153, 1153, 1154, 1156, 1153, 1157,
     1158, 1158, 1159, 1153, 1160, 1153, 1161, 1162, 1163, 1164,
     1153, 1153, 1165, 1166, 1153, 1167, 1158, 1158, 1168, 1169,
     1170, 1170, 1171, 1173, 1172, 1171, 1171, 1174, 1175, 1171,

     1176, 1177, 1179, 1171, 1170, 1172, 1170, 1170, 1170, 1171,
     1171, 1176, 1178, 1171, 1181, 1182, 1178, 1183, 1184, 1176,
     1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
     1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1229,
     1230, 1231, 1233, 1234, 1235, 1217, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1251, 1251,
     1254, 1255, 1257, 1258, 1260, 1261, 1262, 1263, 1266, 1269,
     1270, 1272, 1273, 1275, 1276, 1277, 1251, 1278, 1279, 1280,

     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301,
     1302, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1313, 1314,
     1315, 1316, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1327, 1329, 1330, 1331, 1333, 1332, 1334, 1336,
     1322, 1332, 1335, 1335, 1337, 1332, 1339, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1350, 1352, 1350, 1350, 1353,
     1354, 1355, 1356, 1357, 1358, 1359, 1359, 1354, 1360, 1355,
     1353, 1361, 1350, 1362, 1350, 1363, 1353, 1359, 1359, 1364,
     1365, 1361, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,

     1374, 1375, 1376, 1377, 1378, 1379, 1376, 1376, 1376, 1380,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1387, 1388, 1389,
     1385, 1388, 1390, 1391, 1392, 1393, 1384, 1394, 1395, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
     1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1428,
     1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1451, 1454, 1455, 1456, 1459, 1460, 1461, 1462, 1464, 1465,
     1468, 1469, 1470, 1475, 1479, 1484, 1487, 1488, 1489, 1490,

     1492, 1493, 1494, 1495, 1497, 1498, 1499, 1500, 1501, 1502,
     1503, 1506, 1508, 1509, 1510, 1513, 1514, 1515, 1516, 1517,
     1510, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1531, 1526, 1532, 1533, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1538, 1541, 1542, 1543, 1544,
     1545, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1557,
     1556, 1558, 1559, 1560, 1561, 1562, 1552, 1556, 1563, 1564,
     1565, 1566, 1552, 1567, 1568, 1552, 1569, 1570, 1571, 1559,
     1572, 1573, 1574, 1575, 1576, 1577, 1578, 1573, 1579, 1580,
     1581, 1582, 1583, 1584, 1585, 1588, 1589, 1590, 1591, 1592,

     1593, 1594, 1595, 1596, 1597, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1591, 1606, 1607, 1608, 1597, 1609, 1610, 1611,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1629, 1631,
     1629, 1630, 1629, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
     1639, 1640, 1641, 1642, 1629, 1629, 1630, 1643, 1644, 1645,
     1648, 1649, 1639, 1650, 1649, 1651, 1652, 1653, 1654, 1655,
     1656, 1657, 1658, 1659, 1660, 1661, 1662, 1664, 1665, 1668,
     1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1679, 1680,
     1681, 1682, 1683, 1685, 1687, 1688, 1689, 1690, 1691, 1689,

     1693, 1695, 1698, 1699, 1689, 1700, 1701, 1702, 1704, 1705,
     1706, 1707, 1709, 1710, 1712, 1714, 1715, 1700, 1700, 1700,
     1716, 1717, 1700, 1700, 1718, 1719, 1720, 1721, 1722, 1723,
     1724, 1725, 1726, 1727, 1728, 1729, 1730, 1732, 1733, 1735,
     1736, 1737, 1738, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
     1747, 1748, 1749, 1751, 1743, 1750, 1752, 1753, 1743, 1743,
     1754, 1750, 1755, 1755, 1756, 1757, 1759, 1760, 1761, 1762,
     1763, 1764, 1761, 1757, 1765, 1766, 1767, 1768, 1769, 1770,
     1771, 1772, 1773, 1774, 1775, 1776, 1777, 1779, 1780, 1781,
     1782, 1783, 1784, 1785, 1788, 1789, 1790, 1791, 1792, 1793,

     1794, 1795, 1796, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
     1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
     1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
     1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
     1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
     1846, 1848, 1849, 1850, 1852, 1853, 1854, 1855, 1856, 1857,
     1858, 1859, 1860, 1862, 1857, 1861, 1861, 1861, 1857, 1857,
     1857, 1866, 1868, 1869, 1871, 1872, 1873, 1874, 1861, 1875,
     1876, 1878, 1879, 1861, 1880, 1881, 1882, 1883, 1884, 1885,
     1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,

     1896, 1897, 1898, 1899, 1886, 1900, 1901, 1902, 1903, 1904,
     1905, 1906, 1907, 1898, 1908, 1909, 1910, 1911, 1912, 1913,
     1914, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
     1925, 1926, 1928, 1929, 1930, 1931, 1932, 1934, 1935, 1936,
     1937, 1938, 1939, 1937, 1940, 1941, 1942, 1943, 1944, 1945,
     1946, 1947, 1939, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
     1955, 1956, 1958, 1959, 1960, 1961, 1962, 1964, 1965, 1966,
     1968, 1969, 1970, 1971, 1972, 1974, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1982, 1983, 1984, 1985, 1986, 1982, 1982,
     1988, 1989, 1982, 1990, 1982, 1982, 1991, 1992, 1993, 1982,

     1994, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2002, 2004,
     2005, 2006, 2007, 2008, 2009, 2011, 2012, 2013, 2014, 2015,
     2017, 2018, 2019, 2020, 2002, 2022, 2023, 2024, 2025, 2026,
     2027, 2028, 2029, 2029, 2030, 2031, 2032, 2035, 2036, 2036,
     2036, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
     2047, 2048, 2049, 2050, 2051, 2052, 2053, 2055, 2054, 2056,
     2043, 2054, 2043, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
     2064, 2065, 2066, 2054, 2067, 2068, 2072, 2073, 2058, 2074,
     2075, 2076, 2077, 2078, 2080, 2081, 2082, 2083, 2084, 2075,
     2085, 2086, 2087, 2088, 2090, 2075, 2091, 2092, 2093, 2094,

     2095, 2096, 2098, 2099, 2100, 2103, 2104, 2105, 2106, 2107,
     2108, 2109, 2110, 2111, 2112, 2113, 2115, 2116, 2117, 2118,
     2119, 2121, 2122, 2123, 2125, 2126, 2127, 2129, 2130, 2131,
     2132, 2133, 2134, 2135, 2136, 2137, 2135, 2138, 2139, 2135,
     2140, 2141, 2142, 2143, 2144, 2145, 2135, 2135, 2146, 2147,
     2148, 2149, 2150, 2151, 2153, 2154, 2155, 2156, 2158, 2159,
     2161, 2163, 2164, 2166, 2168, 2169, 2170, 2171, 2172, 2173,
     2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2184,
     2186, 2187, 2188, 2189, 2191, 2192, 2194, 2195, 2196, 2197,
     2198, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2208, 2207,

     2206, 2207, 2207, 2209, 2210, 2211, 2212, 2213, 2214, 2215,
     2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225,
     2226, 2227, 2231, 2232, 2235, 2236, 2237, 2238, 2239, 2240,
     2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
     2251, 2252, 2253, 2252, 2254, 2255, 2256, 2257, 2258, 2259,
     2252, 2260, 2262, 2263, 2264, 2266, 2267, 2268, 2269, 2270,
     2271, 2272, 2275, 2277, 2278, 2279, 2262, 2280, 2281, 2282,
     2283, 2286, 2287, 2289, 2291, 2280, 2292, 2294, 2295, 2296,
     2298, 2299, 2300, 2301, 2302, 2303, 2306, 2308, 2310, 2311,
     2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322,

     2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2331,
     2332, 2333, 2334, 2335, 2336, 2337, 2339, 2340, 2341, 2331,
     2342, 2343, 2346, 2347, 2349, 2352, 2353, 2355, 2357, 2358,
     2359, 2360, 2361, 2362, 2363, 2364, 2365, 2367, 2368, 2369,
     2371, 2372, 2373, 2376, 2377, 2378, 2379, 2380, 2381, 2382,
     2383, 2384, 2385, 2384, 2386, 2387, 2388, 2389, 2390, 2391,
     2392, 2394, 2395, 2396, 2397, 2399, 2400, 2401, 2402, 2384,
     2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2414,
     2415, 2416, 2417, 2418, 2419, 2420, 2423, 2420, 2421, 2424,
     2425, 2426, 2428, 2427, 2420, 2427, 2421, 2429, 2430, 2431,

     2432, 2433, 2434, 2421, 2435, 2436, 2437, 2439, 2440, 2441,
     2442, 2443, 2444, 2445, 2447, 2448, 2449, 2450, 2451, 2452,
     2453, 2454, 2455, 2456, 2457, 2458, 2459, 2461, 2463, 2465,
     2466, 2468, 2469, 2470, 2471, 2472, 2474, 2475, 2457, 2479,
     2480, 2482, 2483, 2484, 2485, 2486, 2487, 2489, 2490, 2491,
     2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501,
     2502, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2513, 2514,
     2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527,
     2528, 2530, 2531, 2527, 2532, 2533, 2534, 2535, 2536, 2537,
     2528, 2538, 2539, 2528, 2538, 2541, 2528, 2528, 2542, 2543,

     2544, 2545, 2546, 2547, 2544, 2548, 2549, 2550, 2539, 2551,
     2552, 2553, 2554, 2555, 2556, 2554, 2554, 2557, 2558, 2559,
     2560, 2561, 2549, 2562, 2564, 2566, 2567, 2568, 2569, 2570,
     2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
     2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590,
     2591, 2592, 2593, 2594, 2595, 2599, 2600, 2601, 2603, 2604,
     2605, 2606, 2606, 2607, 2608, 2609, 2605, 2610, 2611, 2612,
     2613, 2614, 2615, 2616, 2617, 2618, 2619, 2622, 2610, 2623,
     2624, 2629, 2630, 2631, 2632, 2636, 2638, 2639, 2640, 2641,
     2642, 2643, 2644, 2643, 2643, 2645, 2643, 2643, 2646, 2647,

     2648, 2649, 2643, 2650, 2652, 2651, 2653, 2651, 2654, 2643,
     2643, 2651, 2655, 2656, 2657, 2659, 2661, 2662, 2663, 2664,
     2665, 2666, 2667, 2669, 2670, 2671, 2672, 2673, 2674, 2675,
     2676, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687,
     2688, 2689, 2690, 2691, 2692, 2693, 2694, 2696, 2697, 2698,
     2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708,
     2709, 2710, 2711, 2712, 2713, 2714, 2715, 2717, 2718, 2720,
     2721, 2723, 2724, 2708, 2725, 2726, 2727, 2728, 2729, 2730,
     2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740,
     2741, 2742, 2743, 2744, 2745, 2747, 2748, 2749, 2750, 2751,

     2754, 2756, 2757, 2758, 2761, 2763, 2764, 2765, 2766, 2767,
     2771, 2773, 2774, 2775, 2778, 2780, 2781, 2782, 2783, 2784,
     2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794,
     2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804,
     2810, 2811, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2821,
     2822, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834,
     2836, 2837, 2838, 2840, 2842, 2844, 2845, 2846, 2848, 2849,
     2850, 2851, 2852, 2853, 2858, 2860, 2848, 2861, 2863, 2864,
     2865, 2866, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875,
     2871, 2876, 2877, 2878, 2879, 2880, 2881, 2870, 2870, 2882,

     2870, 2883, 2884, 2885, 2886, 2888, 2889, 2890, 2892, 2893,
     2894, 2895, 2896, 2899, 2900, 2901, 2902, 2903, 2906, 2907,
     2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917,
     2918, 2919, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928,
     2929, 2930, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939,
     2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949,
     2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960,
     2961, 2962, 2963, 2964, 2965, 2966, 2968, 2969, 2970, 2971,
     2972, 2973, 2974, 2975, 2962, 2976, 2977, 2978, 2979, 2980,
     2981, 2982, 2983, 2985, 2986, 2987, 2988, 2989, 2990, 2992,

     2995, 2996, 2998, 3000, 3001, 3002, 3003, 3004, 3008, 3009,
     3010, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020,
     3021, 3022, 3023, 3021, 3024, 3025, 3026, 3027, 3028, 3029,
     3030, 3021, 3032, 3033, 3034, 3021, 3036, 3037, 3021, 3021,
     3021, 3038, 3040, 3041, 3042, 3043, 3044, 3048, 3049, 3050,
     3052, 3054, 3056, 3057, 3058, 3060, 3061, 3062, 3064, 3066,
     3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076,
     3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086,
     3087, 3089, 3091, 3092, 3095, 3096, 3097, 3098, 3099, 3100,
     3086, 3101, 3102, 3103, 3104, 3086, 3105, 3106, 3107, 3108,

     3109, 3110, 3111, 3112, 3115, 3113, 3114, 3116, 3115, 3117,
     3118, 3116, 3119, 3120, 3121, 3110, 3113, 3114, 3122, 3123,
     3124, 3125, 3126, 3127, 3115, 3128, 3130, 3132, 3133, 3134,
     3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144,
     3145, 3146, 3147, 3140, 3148, 3150, 3151, 3152, 3153, 3154,
     3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3165,
     3166, 3167, 3168, 3152, 3169, 3170, 3171, 3172, 3169, 3173,
     3176, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186,
     3187, 3188, 3189, 3190, 3191, 3192, 3188, 3193, 3194, 3195,
     3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3206,

     3207, 3208, 3209, 3210, 3212, 3215, 3218, 3219, 3220, 3221,
     3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231,
     3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3237,
     3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250,
     3252, 3253, 3254, 3255, 3256, 3257, 3259, 3260, 3262, 3263,
     3266, 3265, 3267, 3268, 3248, 3265, 3269, 3270, 3271, 3272,
     3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283,
     3284, 3285, 3286, 3289, 3290, 3291, 3292, 3294, 3295, 3296,
     3297, 3298, 3299, 3300, 3301, 3302, 3305, 3308, 3309, 3310,
     3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320,

     3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3331,
     3332, 3333, 3334, 3335, 3336, 3337, 3339, 3340, 3341, 3342,
     3343, 3345, 3346, 3347, 3348, 3340, 3349, 3350, 3351, 3352,
     3354, 3355, 3359, 3362, 3363, 3365, 3367, 3370, 3371, 3372,
     3373, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384,
     3385, 3386, 3387, 3389, 3390, 3391, 3392, 3393, 3394, 3395,
     3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405,
     3406, 3407, 3408, 3409, 3410, 3412, 3413, 3414, 3415, 3416,
     3417, 3419, 3420, 3422, 3423, 3424, 3425, 3426, 3427, 3428,
     3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438,

     3439, 3440, 3441, 3443, 3444, 3445, 3447, 3448, 3449, 3450,
     3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460,
     3461, 3462, 3463, 3464, 3466, 3467, 3468, 3453, 3470, 3471,
     3472, 3473, 3475, 3476, 3477, 3478, 3481, 3482, 3483, 3485,
     3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496,
     3498, 3500, 3501, 3502, 3503, 3504, 3488, 3505, 3506, 3508,
     3509, 3510, 3511, 3512, 3513, 3514, 3516, 3518, 3519, 3520,
     3522, 3525, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534,
     3535, 3536, 3537, 3538, 3539, 3540, 3543, 3544, 3545, 3546,
     3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556,

     3557, 3558, 3561, 3562, 3563, 3564, 3565, 3566, 3550, 3567,
     3568, 3569, 3570, 3571, 3573, 3574, 3577, 3578, 3579, 3580,
     3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590,
     3592, 3594, 3595, 3597, 3598, 3599, 3600, 3601, 3602, 3603,
     3604, 3605, 3606, 3607, 3608, 3609, 3612, 3613, 3614, 3615,
     3616, 3617, 3621, 3622, 3624, 3625, 3626, 3627, 3630, 3632,
     3633, 3634, 3635, 3636, 3637, 3638, 3639, 3641, 3642, 3643,
     3644, 3645, 3646, 3647, 3649, 3650, 3651, 3652, 3653, 3654,
     3655, 3656, 3657, 3660, 3661, 3662, 3663, 3664, 3665, 3667,
     3668, 3669, 3671, 3672, 3673, 3674, 3676, 3677, 3678, 3679,

     3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3689, 3690,
     3691, 3692, 3694, 3696, 3699, 3700, 3701, 3704, 3709, 3709,
     3709, 3710, 3710, 3711,  672,  670,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  657,  656,  655,  654,
      652,  650,  649,  648,  647,  646,  645,  644,  642,  641,
      640,  639,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  626,  624,  623,  622,  621,  620,  619,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,

      583,  582,  581,  577,  576,  575,  573,  572,  571,  570,
      569,  568,  563,  561,  560,  558,  557,  555,  554,  553,
      552,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  527,  526,  525,  524,  522,  520,  519,  518,
      517,  516,  515,  514,  511,  509,  508,  507,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  477,  476,  474,  473,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,

      459,  458,  457,  456,  452,  451,  449,  448,  447,  446,
      445,  444,  443,  442,  440,  439,  438,  437,  436,  434,
      433,  432,  431,  430,  426,  425,  424,  423,  422,  421,
      420,  419,  417,  416,  414,  413,  412,  411,  410,  408,
      407,  405,  404,  403,  402,  401,  400,  397,  396,  394,
      393,  392,  391,  390,  389,  388,  387,  385,  382,  379,
      378,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  342,  341,  340,  339,  338,  336,  335,  334,

      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  302,  301,
      300,  299,  298,  297,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  248,  247,  246,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,

      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  196,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  183,  173,  172,  171,  170,
      168,  167,  166,  164,  163,  162,  161,  157,  156,  155,
      154,  152,  151,  150,  149,  148,  147,  145,  144,  142,
      140,  139,  138,  137,  136,  135,  134,  133,  131,  130,
      128,  126,  125,  124,  123,  121,  119,  118,  117,  116,
      114,  112,  111,  110,  109,  107,  106,  105,  104,  103,
      102,  101,  100,   99,   98,   76,   70,   68,   67,   63,

       62,   60,   59,   57,   56,   54,   49,   45,   44,   43,
       38,   37,   36,   34,   33,   32,   31,   24,   13,   10,
        9,    7,    3, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,

     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "indra.l"
#line 12 "indra.l"
// We maintain a pre-generated lexer source file to simplify user builds.
// Before committing changes to this file, manually run
//
//   flex -o indra_generated.l.cpp indra.l
//
// to update the pre-generated lexer.  Then commit all files simultaneously.
#include "linden_common.h"
// Deal with the fact that lex/yacc generates unreachable code
#ifdef LL_WINDOWS
#pragma warning (disable : 4018) // warning C4018: signed/unsigned mismatch
#pragma warning (disable : 4702) // warning C4702: unreachable code
#endif	//	LL_WINDOWS
#include "llmath.h"
#include "lscript_tree.h"
#include "lscript_typecheck.h"
#include "lscript_resource.h"
#include "indra.y.hpp"
#include "lltimer.h"
#include "indra_constants.h"
#include "llagentconstants.h"
#include "lllslconstants.h"
#include "lluuid.h"
#include "llassetstorage.h"
#include "llpartdata.h"
#include "llvehicleparams.h"
#include "llpermissionsflags.h"
#include "llfollowcamparams.h"
#include "llparcelflags.h"
#include "llregionflags.h"
#include "lscript_http.h"
#include "llclickaction.h"

void count();
void line_comment();
void block_comment();
void parse_string();

#define YYLMAX 16384
#define YY_NEVER_INTERACTIVE 1 /* stops flex from calling isatty() */
#ifdef LL_WINDOWS
#define isatty(x) 0 /* hack for bug in cygwin flex 2.5.35 */
#endif

#ifdef ECHO
#undef ECHO
#endif

#define ECHO do { } while (0)

#if defined(__cplusplus)
extern "C" { int yylex(void ); }
extern "C" { int yyparse( void ); }
extern "C" { int yyerror(const char *fmt, ...); }
#endif

#line 2604 "indra_generated.l.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 69 "indra.l"

#line 2793 "indra_generated.l.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3709 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3824 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 70 "indra.l"
{ gInternalLine++; gInternalColumn = 0; line_comment(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "indra.l"
{ block_comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "indra.l"
{ count(); return(INTEGER); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 74 "indra.l"
{ count(); return(FLOAT_TYPE); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 75 "indra.l"
{ count(); return(STRING); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 76 "indra.l"
{ count(); return(LLKEY); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 77 "indra.l"
{ count(); return(VECTOR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 78 "indra.l"
{ count(); return(QUATERNION); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 79 "indra.l"
{ count(); return(QUATERNION); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 80 "indra.l"
{ count(); return(LIST); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "indra.l"
{ count(); yylval.sval = new char[strlen(yytext) + 1]; strcpy(yylval.sval, yytext); return(STATE_DEFAULT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "indra.l"
{ count(); return(STATE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "indra.l"
{ count(); return(EVENT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "indra.l"
{ count(); return(JUMP); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "indra.l"
{ count(); return(RETURN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "indra.l"
{ count(); return(IF); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "indra.l"
{ count(); return(ELSE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "indra.l"
{ count(); return(FOR); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "indra.l"
{ count(); return(DO); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "indra.l"
{ count(); return(WHILE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 93 "indra.l"
{ count(); return(STATE_ENTRY); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 94 "indra.l"
{ count(); return(STATE_EXIT); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 95 "indra.l"
{ count(); return(TOUCH_START); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 96 "indra.l"
{ count(); return(TOUCH); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 97 "indra.l"
{ count(); return(TOUCH_END); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 98 "indra.l"
{ count(); return(COLLISION_START); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 99 "indra.l"
{ count(); return(COLLISION); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "indra.l"
{ count(); return(COLLISION_END); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 101 "indra.l"
{ count(); return(LAND_COLLISION_START); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 102 "indra.l"
{ count(); return(LAND_COLLISION); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 103 "indra.l"
{ count(); return(LAND_COLLISION_END); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 104 "indra.l"
{ count(); return(TIMER); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 105 "indra.l"
{ count(); return(CHAT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 106 "indra.l"
{ count(); return(SENSOR); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 107 "indra.l"
{ count(); return(NO_SENSOR); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 108 "indra.l"
{ count(); return(CONTROL); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 109 "indra.l"
{ count(); return(PRINT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 110 "indra.l"
{ count(); return(AT_TARGET); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 111 "indra.l"
{ count(); return(NOT_AT_TARGET); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 112 "indra.l"
{ count(); return(AT_ROT_TARGET); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 113 "indra.l"
{ count(); return(NOT_AT_ROT_TARGET); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 114 "indra.l"
{ count(); return(MONEY); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 115 "indra.l"
{ count(); return(EMAIL); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 116 "indra.l"
{ count(); return(RUN_TIME_PERMISSIONS); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "indra.l"
{ count(); return(INVENTORY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 118 "indra.l"
{ count(); return(ATTACH); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "indra.l"
{ count(); return(DATASERVER); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "indra.l"
{ count(); return(MOVING_START); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "indra.l"
{ count(); return(MOVING_END); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "indra.l"
{ count(); return(LINK_MESSAGE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "indra.l"
{ count(); return(REZ); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 124 "indra.l"
{ count(); return(OBJECT_REZ); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "indra.l"
{ count(); return(REMOTE_DATA); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "indra.l"
{ count(); return(HTTP_RESPONSE); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "indra.l"
{ count(); return(HTTP_REQUEST); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 128 "indra.l"
{ count(); return(PERIOD); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 131 "indra.l"
{ count(); yylval.ival = strtoul(yytext, NULL, 0);  return(INTEGER_CONSTANT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 132 "indra.l"
{ count(); yylval.ival = strtoul(yytext, NULL, 10); return(INTEGER_CONSTANT); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 133 "indra.l"
{ count(); yylval.ival = 1; return(INTEGER_TRUE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 134 "indra.l"
{ count(); yylval.ival = 0; return(INTEGER_FALSE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 135 "indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 136 "indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 137 "indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 138 "indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 139 "indra.l"
{ count(); yylval.ival = 0x10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 140 "indra.l"
{ count(); yylval.ival = 0x20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 141 "indra.l"
{ count(); yylval.ival = 0x40; return(INTEGER_CONSTANT); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 142 "indra.l"
{ count(); yylval.ival = 0x80; return(INTEGER_CONSTANT); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 143 "indra.l"
{ count(); yylval.ival = 0x100; return(INTEGER_CONSTANT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 144 "indra.l"
{ count(); yylval.ival = 0x200; return(INTEGER_CONSTANT); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 146 "indra.l"
{ count(); yylval.ival = AGENT_FLYING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 147 "indra.l"
{ count(); yylval.ival = AGENT_ATTACHMENTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 148 "indra.l"
{ count(); yylval.ival = AGENT_SCRIPTED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "indra.l"
{ count(); yylval.ival = AGENT_MOUSELOOK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "indra.l"
{ count(); yylval.ival = AGENT_SITTING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "indra.l"
{ count(); yylval.ival = AGENT_ON_OBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "indra.l"
{ count(); yylval.ival = AGENT_AWAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "indra.l"
{ count(); yylval.ival = AGENT_WALKING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "indra.l"
{ count(); yylval.ival = AGENT_IN_AIR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "indra.l"
{ count(); yylval.ival = AGENT_TYPING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "indra.l"
{ count(); yylval.ival = AGENT_CROUCHING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "indra.l"
{ count(); yylval.ival = AGENT_BUSY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "indra.l"
{ count(); yylval.ival = AGENT_ALWAYS_RUN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 160 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_PITCH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 161 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_OFFSET; return (INTEGER_CONSTANT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 162 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 163 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 164 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_DISTANCE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 165 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_BEHINDNESS_ANGLE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 166 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_BEHINDNESS_LAG; return (INTEGER_CONSTANT); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 167 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_THRESHOLD; return (INTEGER_CONSTANT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 168 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_THRESHOLD; return (INTEGER_CONSTANT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 169 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_ACTIVE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 170 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION; return (INTEGER_CONSTANT); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 171 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS; return (INTEGER_CONSTANT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 172 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_POSITION_LOCKED; return (INTEGER_CONSTANT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 173 "indra.l"
{ count(); yylval.ival = FOLLOWCAM_FOCUS_LOCKED; return (INTEGER_CONSTANT); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 175 "indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 176 "indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 177 "indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 178 "indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 179 "indra.l"
{ count(); yylval.ival = 0x10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 180 "indra.l"
{ count(); yylval.ival = 0x20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 181 "indra.l"
{ count(); yylval.ival = 0x40; return(INTEGER_CONSTANT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 183 "indra.l"
{ count(); yylval.ival = LSL_ALL_SIDES; return(INTEGER_CONSTANT); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 184 "indra.l"
{ count(); yylval.ival = LSL_LINK_ROOT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 185 "indra.l"
{ count(); yylval.ival = LSL_LINK_SET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 186 "indra.l"
{ count(); yylval.ival = LSL_LINK_ALL_OTHERS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 187 "indra.l"
{ count(); yylval.ival = LSL_LINK_ALL_CHILDREN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 188 "indra.l"
{ count(); yylval.ival = LSL_LINK_THIS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 190 "indra.l"
{ count(); yylval.ival = 0x1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 191 "indra.l"
{ count(); yylval.ival = 0x2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 192 "indra.l"
{ count(); yylval.ival = 0x4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 193 "indra.l"
{ count(); yylval.ival = 0x8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 195 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_AT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 196 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_AT_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 197 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LEFT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 198 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LEFT_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 199 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_YAW_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 200 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_YAW_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 201 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_UP_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 202 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_UP_NEG; return(INTEGER_CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 203 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_LBUTTON_DOWN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 204 "indra.l"
{ count(); yylval.ival = AGENT_CONTROL_ML_LBUTTON_DOWN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 206 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_DEBIT]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 207 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TAKE_CONTROLS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 208 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_REMAP_CONTROLS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 209 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TRIGGER_ANIMATION]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 210 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_ATTACH]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 211 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_RELEASE_OWNERSHIP]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 212 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_LINKS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 213 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_JOINTS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 214 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CHANGE_PERMISSIONS]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 215 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_TRACK_CAMERA]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 216 "indra.l"
{ count(); yylval.ival = LSCRIPTRunTimePermissionBits[SCRIPT_PERMISSION_CONTROL_CAMERA]; return(INTEGER_CONSTANT); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 218 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 219 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_SOUND; return(INTEGER_CONSTANT); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 220 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_OBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 221 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_LSL_TEXT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 222 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_LANDMARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 223 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_CLOTHING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 224 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_NOTECARD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 225 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_BODYPART; return(INTEGER_CONSTANT); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 226 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_ANIMATION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 227 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_GESTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 228 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 229 "indra.l"
{ count(); yylval.ival = LLAssetType::AT_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 231 "indra.l"
{ count(); yylval.ival = CHANGED_INVENTORY; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 232 "indra.l"
{ count(); yylval.ival = CHANGED_COLOR; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 233 "indra.l"
{ count(); yylval.ival = CHANGED_SHAPE; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 234 "indra.l"
{ count(); yylval.ival = CHANGED_SCALE; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 235 "indra.l"
{ count(); yylval.ival = CHANGED_TEXTURE; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 236 "indra.l"
{ count(); yylval.ival = CHANGED_LINK; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 237 "indra.l"
{ count(); yylval.ival = CHANGED_ALLOWED_DROP; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 238 "indra.l"
{ count(); yylval.ival = CHANGED_OWNER; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 239 "indra.l"
{ count(); yylval.ival = CHANGED_REGION; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 240 "indra.l"
{ count(); yylval.ival = CHANGED_TELEPORT; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 241 "indra.l"
{ count(); yylval.ival = CHANGED_REGION_START; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 243 "indra.l"
{ count(); yylval.ival = OBJECT_UNKNOWN_DETAIL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 244 "indra.l"
{ count(); yylval.ival = OBJECT_NAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 245 "indra.l"
{ count(); yylval.ival = OBJECT_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 246 "indra.l"
{ count(); yylval.ival = OBJECT_POS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 247 "indra.l"
{ count(); yylval.ival = OBJECT_ROT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 248 "indra.l"
{ count(); yylval.ival = OBJECT_VELOCITY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 249 "indra.l"
{ count(); yylval.ival = OBJECT_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 250 "indra.l"
{ count(); yylval.ival = OBJECT_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 251 "indra.l"
{ count(); yylval.ival = OBJECT_CREATOR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 253 "indra.l"
{ count(); yylval.ival = LST_INTEGER; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 254 "indra.l"
{ count(); yylval.ival = LST_FLOATINGPOINT; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 255 "indra.l"
{ count(); yylval.ival = LST_STRING; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 256 "indra.l"
{ count(); yylval.ival = LST_KEY; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 257 "indra.l"
{ count(); yylval.ival = LST_VECTOR; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 258 "indra.l"
{ count(); yylval.ival = LST_QUATERNION; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 259 "indra.l"
{ count(); yylval.ival = LST_NULL; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 261 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "00000000-0000-0000-0000-000000000000"); return(STRING_CONSTANT); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 262 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "\n\n\n"); return(STRING_CONSTANT); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 263 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, URL_REQUEST_GRANTED); return(STRING_CONSTANT); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 264 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, URL_REQUEST_DENIED); return(STRING_CONSTANT); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 266 "indra.l"
{ count(); yylval.fval = F_PI; return(FP_CONSTANT); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 267 "indra.l"
{ count(); yylval.fval = F_TWO_PI; return(FP_CONSTANT); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 268 "indra.l"
{ count(); yylval.fval = F_PI_BY_TWO; return(FP_CONSTANT); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 269 "indra.l"
{ count(); yylval.fval = DEG_TO_RAD; return(FP_CONSTANT); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 270 "indra.l"
{ count(); yylval.fval = RAD_TO_DEG; return(FP_CONSTANT); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 271 "indra.l"
{ count(); yylval.fval = F_SQRT2; return(FP_CONSTANT); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 273 "indra.l"
{ count(); yylval.ival = CHAT_CHANNEL_DEBUG; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 274 "indra.l"
{ count(); yylval.ival = 0; return(INTEGER_CONSTANT); }	
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 276 "indra.l"
{ count(); return(ZERO_VECTOR); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 277 "indra.l"
{ count(); return(ZERO_ROTATION); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 279 "indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 280 "indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 281 "indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 282 "indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 283 "indra.l"
{ count(); yylval.ival = 5; return(INTEGER_CONSTANT); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 284 "indra.l"
{ count(); yylval.ival = 6; return(INTEGER_CONSTANT); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 285 "indra.l"
{ count(); yylval.ival = 7; return(INTEGER_CONSTANT); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 286 "indra.l"
{ count(); yylval.ival = 8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 287 "indra.l"
{ count(); yylval.ival = 9; return(INTEGER_CONSTANT); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 288 "indra.l"
{ count(); yylval.ival = 10; return(INTEGER_CONSTANT); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 289 "indra.l"
{ count(); yylval.ival = 11; return(INTEGER_CONSTANT); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 290 "indra.l"
{ count(); yylval.ival = 12; return(INTEGER_CONSTANT); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 291 "indra.l"
{ count(); yylval.ival = 13; return(INTEGER_CONSTANT); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 292 "indra.l"
{ count(); yylval.ival = 14; return(INTEGER_CONSTANT); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 293 "indra.l"
{ count(); yylval.ival = 15; return(INTEGER_CONSTANT); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 294 "indra.l"
{ count(); yylval.ival = 16; return(INTEGER_CONSTANT); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 295 "indra.l"
{ count(); yylval.ival = 17; return(INTEGER_CONSTANT); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 296 "indra.l"
{ count(); yylval.ival = 18; return(INTEGER_CONSTANT); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 297 "indra.l"
{ count(); yylval.ival = 19; return(INTEGER_CONSTANT); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 298 "indra.l"
{ count(); yylval.ival = 20; return(INTEGER_CONSTANT); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 299 "indra.l"
{ count(); yylval.ival = 21; return(INTEGER_CONSTANT); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 300 "indra.l"
{ count(); yylval.ival = 22; return(INTEGER_CONSTANT); }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 301 "indra.l"
{ count(); yylval.ival = 23; return(INTEGER_CONSTANT); }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 302 "indra.l"
{ count(); yylval.ival = 24; return(INTEGER_CONSTANT); }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 303 "indra.l"
{ count(); yylval.ival = 25; return(INTEGER_CONSTANT); }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 304 "indra.l"
{ count(); yylval.ival = 26; return(INTEGER_CONSTANT); }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 305 "indra.l"
{ count(); yylval.ival = 27; return(INTEGER_CONSTANT); }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 306 "indra.l"
{ count(); yylval.ival = 28; return(INTEGER_CONSTANT); }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 307 "indra.l"
{ count(); yylval.ival = 29; return(INTEGER_CONSTANT); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 308 "indra.l"
{ count(); yylval.ival = 30; return(INTEGER_CONSTANT); }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 309 "indra.l"
{ count(); yylval.ival = 31; return(INTEGER_CONSTANT); }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 310 "indra.l"
{ count(); yylval.ival = 32; return(INTEGER_CONSTANT); }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 311 "indra.l"
{ count(); yylval.ival = 33; return(INTEGER_CONSTANT); }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 312 "indra.l"
{ count(); yylval.ival = 34; return(INTEGER_CONSTANT); }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 313 "indra.l"
{ count(); yylval.ival = 35; return(INTEGER_CONSTANT); }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 314 "indra.l"
{ count(); yylval.ival = 36; return(INTEGER_CONSTANT); }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 315 "indra.l"
{ count(); yylval.ival = 37; return(INTEGER_CONSTANT); }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 316 "indra.l"
{ count(); yylval.ival = 38; return(INTEGER_CONSTANT); }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 317 "indra.l"
{ count(); yylval.ival = 39; return(INTEGER_CONSTANT); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 318 "indra.l"
{ count(); yylval.ival = 40; return(INTEGER_CONSTANT); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 320 "indra.l"
{ count(); yylval.ival = E_LANDBRUSH_LEVEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 321 "indra.l"
{ count(); yylval.ival = E_LANDBRUSH_RAISE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 322 "indra.l"
{ count(); yylval.ival = E_LANDBRUSH_LOWER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 323 "indra.l"
{ count(); yylval.ival = E_LANDBRUSH_SMOOTH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 324 "indra.l"
{ count(); yylval.ival = E_LANDBRUSH_NOISE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 325 "indra.l"
{ count(); yylval.ival = E_LANDBRUSH_REVERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 327 "indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 328 "indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 329 "indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 331 "indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 332 "indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 333 "indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 334 "indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 335 "indra.l"
{ count(); yylval.ival = 5; return(INTEGER_CONSTANT); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 336 "indra.l"
{ count(); yylval.ival = 6; return(INTEGER_CONSTANT); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 337 "indra.l"
{ count(); yylval.ival = 7; return(INTEGER_CONSTANT); }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 338 "indra.l"
{ count(); yylval.ival = 8; return(INTEGER_CONSTANT); }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 340 "indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 341 "indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 343 "indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_CHANNEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 344 "indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_REQUEST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 345 "indra.l"
{ count(); yylval.ival = LSL_REMOTE_DATA_REPLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 348 "indra.l"
{ count(); yylval.ival = LLPS_PART_FLAGS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 349 "indra.l"
{ count(); yylval.ival = LLPS_PART_START_COLOR; return (INTEGER_CONSTANT); }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 350 "indra.l"
{ count(); yylval.ival = LLPS_PART_START_ALPHA; return (INTEGER_CONSTANT); }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 351 "indra.l"
{ count(); yylval.ival = LLPS_PART_START_SCALE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 352 "indra.l"
{ count(); yylval.ival = LLPS_PART_END_COLOR; return (INTEGER_CONSTANT); }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 353 "indra.l"
{ count(); yylval.ival = LLPS_PART_END_ALPHA; return (INTEGER_CONSTANT); }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 354 "indra.l"
{ count(); yylval.ival = LLPS_PART_END_SCALE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 355 "indra.l"
{ count(); yylval.ival = LLPS_PART_MAX_AGE; return (INTEGER_CONSTANT); }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 358 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_WIND_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 359 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_INTERP_COLOR_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 360 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_INTERP_SCALE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 361 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_BOUNCE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 362 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_FOLLOW_SRC_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 363 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_FOLLOW_VELOCITY_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 364 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_TARGET_POS_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 365 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_EMISSIVE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 366 "indra.l"
{ count(); yylval.ival = LLPartData::LL_PART_TARGET_LINEAR_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 369 "indra.l"
{ count(); yylval.ival = LLPS_SRC_MAX_AGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 370 "indra.l"
{ count(); yylval.ival = LLPS_SRC_PATTERN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 371 "indra.l"
{ count(); yylval.ival = LLPS_SRC_INNERANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 372 "indra.l"
{ count(); yylval.ival = LLPS_SRC_OUTERANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 373 "indra.l"
{ count(); yylval.ival = LLPS_SRC_ANGLE_BEGIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 374 "indra.l"
{ count(); yylval.ival = LLPS_SRC_ANGLE_END; return(INTEGER_CONSTANT); }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 375 "indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_RATE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 376 "indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_PART_COUNT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 377 "indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_RADIUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 378 "indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_SPEED_MIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 379 "indra.l"
{ count(); yylval.ival = LLPS_SRC_BURST_SPEED_MAX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 380 "indra.l"
{ count(); yylval.ival = LLPS_SRC_ACCEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 381 "indra.l"
{ count(); yylval.ival = LLPS_SRC_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 382 "indra.l"
{ count(); yylval.ival = LLPS_SRC_TARGET_UUID; return(INTEGER_CONSTANT); }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 383 "indra.l"
{ count(); yylval.ival = LLPS_SRC_OMEGA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 385 "indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_OBJ_REL_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 387 "indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_DROP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 388 "indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_EXPLODE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 389 "indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 390 "indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE_CONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 391 "indra.l"
{ count(); yylval.ival = LLPartSysData::LL_PART_SRC_PATTERN_ANGLE_CONE_EMPTY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 394 "indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 395 "indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_SLED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 396 "indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_CAR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 397 "indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_BOAT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 398 "indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_AIRPLANE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 399 "indra.l"
{ count(); yylval.ival = VEHICLE_TYPE_BALLOON; return(INTEGER_CONSTANT); }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 401 "indra.l"
{ count(); yylval.ival = VEHICLE_REFERENCE_FRAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 402 "indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_FRICTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 403 "indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_FRICTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 404 "indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_DIRECTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 405 "indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_DIRECTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 406 "indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_OFFSET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 410 "indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_HEIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 411 "indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 412 "indra.l"
{ count(); yylval.ival = VEHICLE_HOVER_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 413 "indra.l"
{ count(); yylval.ival = VEHICLE_BUOYANCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 415 "indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_DEFLECTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 416 "indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_DEFLECTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 417 "indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 418 "indra.l"
{ count(); yylval.ival = VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 420 "indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 421 "indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_DEFLECTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 422 "indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 423 "indra.l"
{ count(); yylval.ival = VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 425 "indra.l"
{ count(); yylval.ival = VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 426 "indra.l"
{ count(); yylval.ival = VEHICLE_VERTICAL_ATTRACTION_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 428 "indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_EFFICIENCY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 429 "indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_MIX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 430 "indra.l"
{ count(); yylval.ival = VEHICLE_BANKING_TIMESCALE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 432 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_NO_DEFLECTION_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 433 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_NO_DEFLECTION_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 434 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_LIMIT_ROLL_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 435 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_WATER_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 436 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_TERRAIN_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 437 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 438 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_HOVER_UP_ONLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 439 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_LIMIT_MOTOR_UP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 440 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_MOUSELOOK_STEER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 441 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_MOUSELOOK_BANK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 442 "indra.l"
{ count(); yylval.ival = VEHICLE_FLAG_CAMERA_DECOUPLED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 446 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 447 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 448 "indra.l"
{ count(); yylval.ival = LSL_PRIM_PHYSICS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 449 "indra.l"
{ count(); yylval.ival = LSL_PRIM_FLEXIBLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 450 "indra.l"
{ count(); yylval.ival = LSL_PRIM_POINT_LIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 451 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TEMP_ON_REZ; return(INTEGER_CONSTANT); }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 452 "indra.l"
{ count(); yylval.ival = LSL_PRIM_PHANTOM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 453 "indra.l"
{ count(); yylval.ival = LSL_PRIM_CAST_SHADOWS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 454 "indra.l"
{ count(); yylval.ival = LSL_PRIM_POSITION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 455 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SIZE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 456 "indra.l"
{ count(); yylval.ival = LSL_PRIM_ROTATION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 457 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 458 "indra.l"
{ count(); yylval.ival = LSL_PRIM_COLOR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 459 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SHINY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 460 "indra.l"
{ count(); yylval.ival = LSL_PRIM_FULLBRIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 461 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 462 "indra.l"
{ count(); yylval.ival = LSL_PRIM_GLOW; return(INTEGER_CONSTANT); }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 464 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_BOX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 465 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_CYLINDER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 466 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_PRISM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 467 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_SPHERE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 468 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_TORUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 469 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_TUBE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 470 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_RING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 471 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TYPE_SCULPT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 473 "indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 474 "indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_CIRCLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 475 "indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_SQUARE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 476 "indra.l"
{ count(); yylval.ival = LSL_PRIM_HOLE_TRIANGLE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 478 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_STONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 479 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_METAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 480 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_GLASS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 481 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_WOOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 482 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_FLESH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 483 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_PLASTIC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 484 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_RUBBER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 485 "indra.l"
{ count(); yylval.ival = LSL_PRIM_MATERIAL_LIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 487 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 488 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_LOW; return(INTEGER_CONSTANT); }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 489 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_MEDIUM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 490 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SHINY_HIGH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 492 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 493 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BRIGHT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 494 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_DARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 495 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_WOOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 496 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 497 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BRICKS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 498 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_CHECKER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 499 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_CONCRETE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 500 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_TILE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 501 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_STONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 502 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_DISKS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 503 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_GRAVEL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 504 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_BLOBS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 505 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SIDING; return(INTEGER_CONSTANT); }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 506 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_LARGETILE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 507 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_STUCCO; return(INTEGER_CONSTANT); }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 508 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_SUCTION; return(INTEGER_CONSTANT); }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 509 "indra.l"
{ count(); yylval.ival = LSL_PRIM_BUMP_WEAVE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 511 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 512 "indra.l"
{ count(); yylval.ival = LSL_PRIM_TEXGEN_PLANAR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 514 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_SPHERE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 515 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_TORUS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 516 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_PLANE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 517 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_CYLINDER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 518 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_TYPE_MASK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 519 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_FLAG_MIRROR; return(INTEGER_CONSTANT); }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 520 "indra.l"
{ count(); yylval.ival = LSL_PRIM_SCULPT_FLAG_INVERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 522 "indra.l"
{ count(); yylval.ival = 0; return(INTEGER_CONSTANT); }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 523 "indra.l"
{ count(); yylval.ival = 1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 524 "indra.l"
{ count(); yylval.ival = 2; return(INTEGER_CONSTANT); }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 525 "indra.l"
{ count(); yylval.ival = 3; return(INTEGER_CONSTANT); }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 526 "indra.l"
{ count(); yylval.ival = 4; return(INTEGER_CONSTANT); }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 528 "indra.l"
{ count(); yylval.ival = PERM_TRANSFER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 529 "indra.l"
{ count(); yylval.ival = PERM_MODIFY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 530 "indra.l"
{ count(); yylval.ival = PERM_COPY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 531 "indra.l"
{ count(); yylval.ival = PERM_MOVE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 532 "indra.l"
{ count(); yylval.ival = PERM_ALL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 534 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_STOP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 535 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_PAUSE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 536 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_PLAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 537 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_LOOP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 538 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TEXTURE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 539 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_URL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 540 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TIME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 541 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_AGENT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 542 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_UNLOAD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 543 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_AUTO_ALIGN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 544 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_TYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 545 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_SIZE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 546 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 547 "indra.l"
{ count(); yylval.ival = PARCEL_MEDIA_COMMAND_LOOP_SET; return(INTEGER_CONSTANT); }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 549 "indra.l"
{ count(); yylval.ival = LIST_STAT_MAX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 550 "indra.l"
{ count(); yylval.ival = LIST_STAT_MIN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 551 "indra.l"
{ count(); yylval.ival = LIST_STAT_MEAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 552 "indra.l"
{ count(); yylval.ival = LIST_STAT_MEDIAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 553 "indra.l"
{ count(); yylval.ival = LIST_STAT_STD_DEV; return(INTEGER_CONSTANT); }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 554 "indra.l"
{ count(); yylval.ival = LIST_STAT_SUM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 555 "indra.l"
{ count(); yylval.ival = LIST_STAT_SUM_SQUARES; return(INTEGER_CONSTANT); }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 556 "indra.l"
{ count(); yylval.ival = LIST_STAT_NUM_COUNT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 557 "indra.l"
{ count(); yylval.ival = LIST_STAT_GEO_MEAN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 558 "indra.l"
{ count(); yylval.ival = LIST_STAT_RANGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 560 "indra.l"
{ count(); yylval.ival = PAY_PRICE_HIDE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 561 "indra.l"
{ count(); yylval.ival = PAY_PRICE_DEFAULT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 563 "indra.l"
{ count(); yylval.ival = PF_ALLOW_FLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 564 "indra.l"
{ count(); yylval.ival = PF_ALLOW_GROUP_SCRIPTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 565 "indra.l"
{ count(); yylval.ival = PF_ALLOW_OTHER_SCRIPTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 566 "indra.l"
{ count(); yylval.ival = PF_ALLOW_LANDMARK; return(INTEGER_CONSTANT); }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 567 "indra.l"
{ count(); yylval.ival = PF_ALLOW_TERRAFORM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 568 "indra.l"
{ count(); yylval.ival = PF_ALLOW_DAMAGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 569 "indra.l"
{ count(); yylval.ival = PF_CREATE_OBJECTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 570 "indra.l"
{ count(); yylval.ival = PF_CREATE_GROUP_OBJECTS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 571 "indra.l"
{ count(); yylval.ival = PF_USE_ACCESS_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 572 "indra.l"
{ count(); yylval.ival = PF_USE_ACCESS_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 573 "indra.l"
{ count(); yylval.ival = PF_USE_BAN_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 574 "indra.l"
{ count(); yylval.ival = PF_USE_PASS_LIST; return(INTEGER_CONSTANT); }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 575 "indra.l"
{ count(); yylval.ival = PF_SOUND_LOCAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 576 "indra.l"
{ count(); yylval.ival = PF_RESTRICT_PUSHOBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 577 "indra.l"
{ count(); yylval.ival = PF_ALLOW_GROUP_OBJECT_ENTRY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 578 "indra.l"
{ count(); yylval.ival = PF_ALLOW_ALL_OBJECT_ENTRY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 580 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_ALLOW_DAMAGE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 581 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_SUN_FIXED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 582 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_BLOCK_TERRAFORM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 583 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_SANDBOX; return(INTEGER_CONSTANT); }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 584 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_SKIP_COLLISIONS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 585 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_SKIP_PHYSICS; return(INTEGER_CONSTANT); }
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 586 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_BLOCK_FLY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 587 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_ALLOW_DIRECT_TELEPORT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 588 "indra.l"
{ count(); yylval.ival = REGION_FLAGS_RESTRICT_PUSHOBJECT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 590 "indra.l"
{ count(); yylval.ival = HTTP_METHOD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 591 "indra.l"
{ count(); yylval.ival = HTTP_MIMETYPE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 592 "indra.l"
{ count(); yylval.ival = HTTP_BODY_MAXLENGTH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 593 "indra.l"
{ count(); yylval.ival = HTTP_BODY_TRUNCATED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 594 "indra.l"
{ count(); yylval.ival = HTTP_VERIFY_CERT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 596 "indra.l"
{ count(); yylval.ival = OC_TOTAL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 597 "indra.l"
{ count(); yylval.ival = OC_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 598 "indra.l"
{ count(); yylval.ival = OC_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 599 "indra.l"
{ count(); yylval.ival = OC_OTHER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 600 "indra.l"
{ count(); yylval.ival = OC_SELECTED; return(INTEGER_CONSTANT); }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 601 "indra.l"
{ count(); yylval.ival = OC_TEMP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 603 "indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_NAME; return(INTEGER_CONSTANT); }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 604 "indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_DESC; return(INTEGER_CONSTANT); }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 605 "indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_OWNER; return(INTEGER_CONSTANT); }
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 606 "indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_GROUP; return(INTEGER_CONSTANT); }
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 607 "indra.l"
{ count(); yylval.ival = PARCEL_DETAILS_AREA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 609 "indra.l"
{ count(); yylval.ival = STRING_TRIM_HEAD; return(INTEGER_CONSTANT); }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 610 "indra.l"
{ count(); yylval.ival = STRING_TRIM_TAIL; return(INTEGER_CONSTANT); }
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 611 "indra.l"
{ count(); yylval.ival = STRING_TRIM; return(INTEGER_CONSTANT); }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 613 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_NONE; return(INTEGER_CONSTANT); }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 614 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_TOUCH; return(INTEGER_CONSTANT); }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 615 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_SIT; return(INTEGER_CONSTANT); }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 616 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_BUY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 617 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_PAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 618 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_OPEN; return(INTEGER_CONSTANT); }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 619 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_PLAY; return(INTEGER_CONSTANT); }
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 620 "indra.l"
{ count(); yylval.ival = CLICK_ACTION_OPEN_MEDIA; return(INTEGER_CONSTANT); }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 622 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "5748decc-f629-461c-9a36-a35a221fe21f"); return(STRING_CONSTANT); }
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 623 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "89556747-24cb-43ed-920b-47caed15465f"); return(STRING_CONSTANT); }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 624 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "8b5fec65-8d8d-9dc5-cda8-8fdf2716e361"); return(STRING_CONSTANT); }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 625 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "89556747-24cb-43ed-920b-47caed15465f"); return(STRING_CONSTANT); }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 626 "indra.l"
{ yylval.sval = new char[UUID_STR_LENGTH]; strcpy(yylval.sval, "8dcd4a48-2d37-4909-9f78-f7a9eb4ef903"); return(STRING_CONSTANT); }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 628 "indra.l"
{ count(); yylval.ival = -1; return(INTEGER_CONSTANT); }
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 629 "indra.l"
{ count(); return(TOUCH_INVALID_VECTOR); }
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 630 "indra.l"
{ count(); return(TOUCH_INVALID_TEXCOORD); }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 633 "indra.l"
{ count(); yylval.sval = new char[strlen(yytext) + 1]; strcpy(yylval.sval, yytext); return(IDENTIFIER); }
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 635 "indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 636 "indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 637 "indra.l"
{ count(); yylval.fval = (F32)atof(yytext); return(FP_CONSTANT); }
	YY_BREAK
case 497:
/* rule 497 can match eol */
YY_RULE_SETUP
#line 639 "indra.l"
{ parse_string(); count(); return(STRING_CONSTANT); }
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 641 "indra.l"
{ count(); return(INC_OP); }
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 642 "indra.l"
{ count(); return(DEC_OP); }
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 643 "indra.l"
{ count(); return(ADD_ASSIGN); }
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 644 "indra.l"
{ count(); return(SUB_ASSIGN); }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 645 "indra.l"
{ count(); return(MUL_ASSIGN); }
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 646 "indra.l"
{ count(); return(DIV_ASSIGN); }
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 647 "indra.l"
{ count(); return(MOD_ASSIGN); }
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 648 "indra.l"
{ count(); return(';'); }
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 649 "indra.l"
{ count(); return('{'); }
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 650 "indra.l"
{ count(); return('}'); }
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 651 "indra.l"
{ count(); return(','); }
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 652 "indra.l"
{ count(); return('='); }
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 653 "indra.l"
{ count(); return('('); }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 654 "indra.l"
{ count(); return(')'); }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 655 "indra.l"
{ count(); return('-'); }
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 656 "indra.l"
{ count(); return('+'); }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 657 "indra.l"
{ count(); return('*'); }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 658 "indra.l"
{ count(); return('/'); }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 659 "indra.l"
{ count(); return('%'); }
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 660 "indra.l"
{ count(); return('@'); }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 661 "indra.l"
{ count(); return(':'); }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 662 "indra.l"
{ count(); return('>'); }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 663 "indra.l"
{ count(); return('<'); }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 664 "indra.l"
{ count(); return(']'); }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 665 "indra.l"
{ count(); return('['); }
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 666 "indra.l"
{ count(); return(EQ);  }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 667 "indra.l"
{ count(); return(NEQ);  }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 668 "indra.l"
{ count(); return(GEQ);  }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 669 "indra.l"
{ count(); return(LEQ);  }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 670 "indra.l"
{ count(); return('&');  }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 671 "indra.l"
{ count(); return('|');  }
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 672 "indra.l"
{ count(); return('^');  }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 673 "indra.l"
{ count(); return('~');  }
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 674 "indra.l"
{ count(); return('!');  }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 675 "indra.l"
{ count(); return(BOOLEAN_AND);	}
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 676 "indra.l"
{ count(); return(BOOLEAN_OR);	}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 677 "indra.l"
{ count(); return(SHIFT_LEFT);  }
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 678 "indra.l"
{ count(); return(SHIFT_RIGHT); }
	YY_BREAK
case 536:
/* rule 536 can match eol */
YY_RULE_SETUP
#line 680 "indra.l"
{ count(); }
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 681 "indra.l"
{ /* ignore bad characters */ }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 683 "indra.l"
ECHO;
	YY_BREAK
#line 5568 "indra_generated.l.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3709 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3709 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3708);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 683 "indra.l"



LLScriptAllocationManager	*gAllocationManager;
LLScriptScript				*gScriptp;

// Prototype for the yacc parser entry point
int yyparse(void);

int yyerror(const char *fmt, ...)
{
	gErrorToText.writeError(yyout, gLine, gColumn, LSERROR_SYNTAX_ERROR);
	return 0;
}

//#define EMERGENCY_DEBUG_PRINTOUTS
//#define EMIT_CIL_ASSEMBLER

BOOL lscript_compile(const char* src_filename, const char* dst_filename,
					 const char* err_filename, BOOL compile_to_mono, const char* class_name, BOOL is_god_like)
{
	BOOL			b_parse_ok = FALSE;
	BOOL			b_dummy = FALSE;
	U64				b_dummy_count = FALSE;
	LSCRIPTType		type = LST_NULL;

	gInternalColumn = 0;
	gInternalLine = 0;
	gScriptp = NULL;

	gErrorToText.init();
	init_supported_expressions();
	init_temp_jumps();
	gAllocationManager = new LLScriptAllocationManager();

	yyin = LLFile::fopen(std::string(src_filename), "r");
	if (yyin)
	{
		yyout = LLFile::fopen(std::string(err_filename), "w");

		// Reset the lexer's internal buffering.

	    yyrestart(yyin);

		b_parse_ok = !yyparse();

		if (b_parse_ok)
		{
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			char compiled[256];
			sprintf(compiled, "%s.o", src_filename);
			LLFILE* compfile;
			compfile = LLFile::fopen(compiled, "w");
#endif

			if(dst_filename)
			{
				gScriptp->setBytecodeDest(dst_filename);
			}

			gScriptp->mGodLike = is_god_like;
			
			gScriptp->setClassName(class_name);

			gScopeStringTable = new LLStringTable(16384);
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			gScriptp->recurse(compfile, 0, 4, LSCP_PRETTY_PRINT, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#endif
			gScriptp->recurse(yyout, 0, 0, LSCP_PRUNE,		 LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_SCOPE_PASS1, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_SCOPE_PASS2, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			gScriptp->recurse(yyout, 0, 0, LSCP_TYPE,		 LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
			if (!gErrorToText.getErrors())
			{
				gScriptp->recurse(yyout, 0, 0, LSCP_RESOURCE, LSPRUNE_INVALID,		 b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#ifdef EMERGENCY_DEBUG_PRINTOUTS
				gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_ASSEMBLY, LSPRUNE_INVALID,  b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
#endif
				if(TRUE == compile_to_mono)
				{
					gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_CIL_ASSEMBLY, LSPRUNE_INVALID,  b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
				}
				else
				{
					gScriptp->recurse(yyout, 0, 0, LSCP_EMIT_BYTE_CODE, LSPRUNE_INVALID, b_dummy, NULL, type, type, b_dummy_count, NULL, NULL, 0, NULL, 0, NULL);
				}
			}
			delete gScopeStringTable;
			gScopeStringTable = NULL;
#ifdef EMERGENCY_DEBUG_PRINTOUTS
			fclose(compfile);
#endif
		}
		fclose(yyout);
		fclose(yyin);
	}

	delete gAllocationManager;
	delete gScopeStringTable;
	
	return b_parse_ok && !gErrorToText.getErrors();
}


BOOL lscript_compile(char *filename, BOOL compile_to_mono, BOOL is_god_like = FALSE)
{
	char src_filename[MAX_STRING];
	sprintf(src_filename, "%s.lsl", filename);
	char err_filename[MAX_STRING];
	sprintf(err_filename, "%s.out", filename);
	char class_name[MAX_STRING];
	sprintf(class_name, "%s", filename);
	return lscript_compile(src_filename, NULL, err_filename, compile_to_mono, class_name, is_god_like);
}


S32 yywrap()
{
#if defined(FLEX_SCANNER) && !defined(LL_WINDOWS)
	// get gcc to stop complaining about lack of use of yyunput
	(void) yyunput;
#endif
	return(1);
}

void line_comment()
{
	char c;

	while ((c = yyinput()) != '\n' && c != 0 && c != EOF)
		;
}

void block_comment()
{
	char c1 = 0;
	char c2 = yyinput();
	while (c2 != 0 && c2 != EOF && !(c1 == '*' && c2 == '/')) {
		if (c2 == '\n')
		{
			gInternalLine++;
			gInternalColumn = 0;
		}
		else if (c2 == '\t')
			gInternalColumn += 4 - (gInternalColumn % 8);
		else
			gInternalColumn++;
		c1 = c2;
		c2 = yyinput();
	}
}

void count()
{
	S32 i;

	gColumn = gInternalColumn;
	gLine = gInternalLine;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n')
		{
			gInternalLine++;
			gInternalColumn = 0;
		}
		else if (yytext[i] == '\t')
			gInternalColumn += 4 - (gInternalColumn % 8);
		else
			gInternalColumn++;
}

void parse_string()
{
	S32 length = (S32)strlen(yytext);
	length = length - 2; 
	char *temp = yytext + 1;

	S32 i;
	S32 escapes = 0;
	S32 tabs = 0;
	for (i = 0; i < length; i++)
	{
		if (temp[i] == '\\')
		{
			escapes++;
			i++;
			if (temp[i] == 't')
				tabs++;
		}
	}

	S32 newlength = length - escapes + tabs*3;
	yylval.sval = new char[newlength + 1];

	char *dest = yylval.sval;

	for (i = 0; i < length; i++)
	{
		if (temp[i] == '\\')
		{
			i++;
			// linefeed
			if (temp[i] == 'n')
			{
				*dest++ = 10;
			}
			else if (temp[i] == 't')
			{
				*dest++ = ' ';
				*dest++ = ' ';
				*dest++ = ' ';
				*dest++ = ' ';
			}
			else
			{
				*dest++ = temp[i];
			}
		}
		else
		{
			*dest++ = temp[i];
		}
	}
	yylval.sval[newlength] = 0;
}

